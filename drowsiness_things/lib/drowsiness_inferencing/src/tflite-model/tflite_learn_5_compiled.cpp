/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 25.04.2024 10:03:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1410784;
#else
constexpr int kTensorArenaSize = 1409760;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,240,240,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 29337, -36565, -34573, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00020906550344079733, 0.00019207116565667093, 0.00019007924129255116, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 95,66,120,-66,-74,1,-11,11,-15,62,31,-16,-21,-82,86,17,-73,77,104,102,-37,-14,27,-77,-127,109,-50,20,71,24,-22,-16, 
  /* [1][0][][] */ 55,-36,-71,26,-9,127,-29,-6,123,-56,-2,-99,-67,105,33,-53,93,-45,-27,-99,-111,24,117,66,27,25,-1,-10,-68,-51,0,-25, 
  /* [2][0][][] */ -41,78,-85,75,85,-43,-52,118,94,28,127,-29,-99,-95,82,118,-83,-52,-9,-113,74,113,-47,-102,82,-57,-17,-123,17,-76,89,-20, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0035423648077994585, 0.0032544159330427647, 0.003220665268599987, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 620, 163, 143, -175, 152, 138, 690, 145, 147, 253, 138, 805, -231, 297, -453, 133, -192, -302, 1086, -303, -185, -137, 168, 257, 154, 341, -390, -80, -236, -204, -98, -320, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.5126274926587939e-05, 4.2275136365788057e-05, 4.5239721657708287e-05, 4.3300089600961655e-05, 4.128967339056544e-05, 4.2133829992963001e-05, 4.8860492825042456e-05, 4.3812018702737987e-05, 4.2310603021178395e-05, 4.3780513806268573e-05, 4.4679298298433423e-05, 5.2707302529597655e-05, 4.533962783170864e-05, 4.2863506678259e-05, 4.3014661059714854e-05, 4.0904560592025518e-05, 4.1107541619567201e-05, 4.2925450543407351e-05, 5.3180388931650668e-05, 4.0995819290401414e-05, 4.19266325479839e-05, 4.3779353291029111e-05, 4.244565570843406e-05, 4.2741157812997699e-05, 4.5844793930882588e-05, 4.4964835979044437e-05, 4.2763524106703699e-05, 4.2207408114336431e-05, 4.0943752537714317e-05, 4.0868573705665767e-05, 4.0271235775435343e-05, 4.2802996176760644e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -28,-40,122,18,127,14,-70,-79,67,-95,-92,9,59,20,-17,62,-41,-22,-55,-48,-61,-82,16,117,-89,17,87,-26,121,-22,-6,-85,91,-50,-65,69,-94,-70,-70,41,79,-75,-88,107,62,-94,108,2,29,-41,-41,105,-58,-43,-63,113,32,71,123,-94,-67,93,-44,56,-6,22,85,101,68,92,89,-106,108,-76,48,98,-100,24,-43,38,60,35,98,2,-45,-32,-73,93,34,122,8,-126,17,65,39,17, 
  /* [1][0][][] */ -62,38,-79,-1,-32,87,44,-2,85,-97,-100,115,58,-27,29,74,113,-37,38,127,-48,-5,37,34,43,25,-42,110,16,12,89,-59,46,109,4,30,58,67,-12,-63,-59,12,-19,-93,-31,43,-26,-53,-29,-80,118,67,10,89,-72,-53,28,99,70,87,-60,110,-63,-97,-53,42,78,44,112,27,12,13,-119,97,-65,41,91,-48,-38,66,-76,83,-68,-113,34,122,-69,-60,82,88,97,33,86,98,33,-11, 
  /* [2][0][][] */ 42,32,-33,114,-18,-43,97,90,-83,77,-34,127,96,-9,82,-103,-51,-26,54,45,-95,0,109,26,-24,84,113,36,-39,67,77,83,-60,-23,-60,-108,-78,86,102,-11,-114,-73,12,-8,-81,107,-29,-66,97,59,82,-88,-30,54,17,20,-69,87,-60,10,-18,83,-39,70,80,41,65,105,-90,62,12,-69,34,-62,29,40,-57,-20,17,7,34,-75,-5,-44,1,-94,-18,-36,85,104,6,-1,-34,-84,-50,-66, 
  /* [3][0][][] */ 79,4,22,-37,-67,37,-120,38,42,25,67,-12,91,93,69,6,102,100,-65,24,120,-95,-66,-119,-21,-124,-90,90,30,-86,85,19,-59,-30,-32,-7,-95,-19,34,45,-20,-89,-93,3,76,34,-40,-88,67,-97,46,5,87,37,92,-104,-111,-109,-115,-62,-96,19,-29,69,65,-29,-71,-43,-36,-65,7,107,21,-116,59,-57,39,96,89,-57,-88,-127,35,99,29,48,-42,-108,-80,46,-14,-96,86,-87,-90,47, 
  /* [4][0][][] */ 60,115,-24,35,-19,-19,36,6,66,103,0,55,20,-34,-7,-60,-20,4,-85,26,120,-100,92,34,-10,-2,63,-83,-68,49,-72,-43,61,127,-9,-96,-45,3,-117,50,-42,-56,-70,-85,43,119,46,59,26,-48,-10,-69,-103,57,-80,19,47,-90,31,21,16,-97,-30,-84,-39,67,-8,-58,36,-100,-98,-77,-56,24,102,45,74,-20,-5,-53,15,-49,-114,-11,8,80,99,13,-114,-69,26,57,37,113,-93,-22, 
  /* [5][0][][] */ 104,-87,76,67,29,-127,10,62,92,-123,-9,-88,29,104,32,25,66,60,-77,89,38,53,23,-41,-117,-83,-28,-102,40,19,22,-110,-26,8,-91,26,-115,-37,48,13,-91,-55,44,103,-33,26,35,-49,-98,90,24,21,41,23,26,-19,117,58,-51,-40,37,-67,34,-64,-32,95,-30,19,66,3,111,-72,-44,66,-19,-70,-1,-44,1,94,100,45,37,108,-87,85,-1,28,75,-104,116,82,-22,16,71,-80, 
  /* [6][0][][] */ 36,-25,120,87,-44,-26,19,73,6,-45,24,-59,85,67,124,-86,54,18,12,127,-57,-85,114,73,-26,-49,13,-31,-5,-77,58,-46,-58,-89,-19,-83,13,56,-78,85,94,68,33,4,-78,106,-60,-22,-55,35,-12,-29,61,-33,100,-2,21,2,-61,118,-71,22,79,-49,-17,74,108,-31,94,7,-82,15,62,-32,-61,-19,-53,-70,-31,-13,46,-6,47,-12,-44,-57,-21,-67,87,97,98,42,-24,-32,72,-15, 
  /* [7][0][][] */ 118,74,-57,-56,-63,116,-17,-10,115,12,-90,15,43,-85,49,78,54,22,-18,119,58,29,-4,89,-61,102,36,37,-91,113,-23,43,13,29,46,105,-100,92,-9,-28,99,-70,88,73,55,3,108,-109,53,-63,-104,-60,-37,91,23,28,119,-85,8,-53,10,-25,84,-127,-61,-48,58,10,-102,23,65,88,83,27,54,51,-56,55,-96,48,96,-39,-29,-66,91,38,-105,99,83,11,70,72,-52,-35,2,-70, 
  /* [8][0][][] */ 19,41,-61,-112,66,27,-80,-19,1,45,50,87,4,-41,-84,-69,-66,103,-76,25,39,-31,86,113,-113,87,38,57,-90,29,-89,127,99,-26,21,6,122,10,-20,68,89,110,-107,-114,-4,-22,-16,111,27,-112,-57,5,-71,0,-26,-109,57,117,-93,109,120,31,51,113,-25,-40,-32,83,-82,56,38,5,79,68,17,19,-40,112,82,84,42,80,-109,-80,31,48,80,-34,44,-32,-105,111,-79,-95,-40,67, 
  /* [9][0][][] */ 8,4,127,61,92,-69,-33,-105,46,43,2,60,-16,-79,-93,-16,16,-1,-79,-79,4,110,-101,-89,126,4,-5,46,10,-68,-88,98,51,-2,51,-23,-66,14,-23,-27,46,-62,61,-89,76,18,-104,59,41,10,-74,-43,92,-76,-64,107,79,-51,-2,7,-91,114,86,-77,-81,6,117,65,-24,109,119,-82,17,89,-96,-84,-70,-110,-28,102,34,26,99,31,-40,-87,42,-15,99,31,-3,107,112,10,56,-26, 
  /* [10][0][][] */ -57,85,70,-78,-9,104,105,18,36,36,28,-69,84,80,-30,17,-32,82,-111,-53,-14,22,56,-63,37,53,-118,-127,-62,84,-94,-72,71,101,96,77,-36,12,-33,32,-29,116,-104,-31,-88,-50,3,-58,-2,-6,39,16,48,26,-55,-37,-93,-12,33,-41,-1,58,113,24,119,-67,-102,-34,25,-19,-91,-60,83,65,-84,97,-8,63,65,24,80,-5,43,106,-92,71,99,-17,37,14,-20,-59,-49,-43,-39,-68, 
  /* [11][0][][] */ 103,29,6,97,127,73,62,36,101,102,-48,107,2,-52,44,-32,-22,-71,81,67,35,80,39,-65,-52,-56,-4,76,83,-2,31,-6,-62,-49,53,52,-23,77,-9,-39,-8,104,-44,23,-21,-38,-60,-59,71,97,91,75,-59,-68,24,32,-44,-34,-13,-47,-59,96,82,12,51,86,-26,29,105,67,-53,-41,47,113,-56,60,-41,48,-21,85,-75,-6,-59,-29,54,-45,28,-9,-70,-3,32,-79,-53,-1,-61,-14, 
  /* [12][0][][] */ 6,58,-39,17,76,2,-37,30,-77,49,-20,15,-44,7,40,-81,-98,-38,-35,-85,18,-9,12,87,-70,-49,93,-78,105,4,-38,101,-84,-73,-21,8,-7,-78,-20,38,102,31,-111,-44,-27,-86,-45,107,-48,-100,-80,91,43,-7,-85,76,-26,-61,49,59,49,122,-12,49,98,24,-38,127,47,91,38,61,78,103,-20,-3,-41,29,-114,-96,-62,99,43,6,-41,24,46,101,-95,-110,106,33,91,-22,21,67, 
  /* [13][0][][] */ 121,-50,100,81,87,122,71,71,67,-98,14,-42,99,81,70,-51,-110,-62,-84,29,79,-24,127,-53,-70,23,6,4,-102,-91,92,38,55,116,-45,49,-78,-21,24,66,-56,84,-50,20,-35,36,6,-23,50,82,-32,-109,-104,42,93,-74,-31,39,-21,-67,-17,120,-69,27,-45,-61,-92,79,-35,-10,106,6,-84,35,-64,-37,-108,76,78,-50,53,-90,107,28,-77,-93,101,114,0,-46,-82,49,117,-43,71,-1, 
  /* [14][0][][] */ -60,-108,77,60,77,-37,-27,-114,-88,-44,59,76,-30,-91,-102,-92,-63,-71,7,15,-52,22,-13,51,-120,-82,-45,21,-121,-120,-88,29,94,-34,-42,-2,86,107,35,-121,-16,-122,29,79,56,-120,56,-94,104,36,77,46,90,-25,-26,2,-55,7,48,89,-21,-91,-35,63,-96,-23,66,-114,-98,-94,-93,87,-1,72,40,-84,48,-118,44,26,34,-23,-124,-43,-127,-101,-120,97,100,-3,79,-54,80,92,-24,61, 
  /* [15][0][][] */ 20,-20,-43,72,107,-84,71,-111,67,8,-66,18,103,6,-88,-108,99,19,-103,37,56,19,79,123,94,79,42,86,17,71,61,-94,-6,14,-76,2,-63,127,118,-67,26,126,-44,-17,34,-73,-36,-82,-8,-82,1,42,-110,-99,-42,-9,77,58,-41,121,-43,-81,10,94,-27,112,-78,-3,-54,9,64,-70,20,-9,51,-121,9,61,116,80,-76,60,-126,-56,-118,-30,-92,51,95,82,-127,-31,63,126,-103,115, 
  /* [16][0][][] */ -66,0,109,-74,37,112,-65,51,44,44,-118,63,-2,-47,-60,-70,111,79,73,62,118,84,-34,46,-43,47,-75,61,-114,8,53,7,-95,82,40,68,-40,52,-52,-77,19,-52,75,91,63,103,103,-14,-50,-127,6,108,-39,121,63,51,32,102,70,11,123,120,31,81,53,9,-37,93,42,108,-23,-13,38,91,79,98,-18,109,-121,-1,9,-80,75,7,7,102,109,4,82,9,-16,111,72,-38,-90,34, 
  /* [17][0][][] */ 28,-117,37,99,-49,-118,-70,-104,42,-95,79,63,104,55,-121,44,27,48,125,109,-100,-15,8,-58,19,65,-79,44,126,-60,-38,70,-36,-30,50,-1,-55,94,-93,-33,-102,-47,-21,-16,1,6,80,-116,80,123,-20,20,-13,72,94,-79,-127,81,-86,-118,26,-93,68,93,-92,-81,44,-82,-115,-8,105,23,10,-123,-74,64,111,-54,38,-66,5,-20,-78,-99,-119,67,75,-40,14,71,-76,-124,-18,90,8,10, 
  /* [18][0][][] */ -78,91,125,-17,24,-51,-49,33,-2,80,-71,-3,-33,44,85,-30,46,-23,74,-35,80,1,40,-28,51,-39,9,127,65,6,22,19,28,-24,-44,-83,7,26,8,58,-33,13,-12,17,-77,20,14,33,12,15,53,33,-57,-22,35,99,-49,20,8,-76,65,123,4,29,-43,-92,14,78,69,-33,-51,91,-63,-2,-51,-50,32,70,25,-68,-47,16,-11,-56,101,-17,69,39,-88,-60,-24,70,78,-46,34,10, 
  /* [19][0][][] */ 17,26,99,71,57,-92,99,95,101,-69,27,-4,-70,32,-60,59,73,-112,120,56,-26,86,-61,11,75,-83,32,-48,-69,-127,-67,44,86,-89,62,-6,5,-75,-60,-104,43,-123,-88,7,-93,27,76,-99,-31,66,-43,43,-33,11,3,-10,20,100,27,-32,54,-40,100,67,-76,-6,-20,25,-12,55,76,-55,-67,-127,-64,-79,-28,-120,14,109,57,-122,-23,78,-93,-11,6,-8,91,28,21,63,-37,116,71,-50, 
  /* [20][0][][] */ -15,68,65,102,-76,102,31,53,28,24,-79,19,-14,84,47,-65,-56,-31,-70,-20,19,-52,-85,-61,89,-61,-101,47,20,26,-48,127,93,42,-14,50,41,-26,-19,-107,-79,-30,-93,-104,-23,-60,-64,104,55,-114,-98,52,42,113,64,-5,91,66,97,90,114,-66,-61,-44,-20,-58,-59,11,-76,-81,-78,84,-73,-76,21,12,124,72,119,101,98,0,77,-16,68,120,-22,88,19,106,17,79,30,36,3,0, 
  /* [21][0][][] */ 91,75,50,-118,89,-95,64,7,-9,-62,-72,26,-4,33,-57,-90,-105,-28,7,-14,107,-58,65,-87,53,-105,-46,51,-8,11,-14,-14,-2,21,-111,-107,103,97,-127,-41,-5,5,26,-15,-96,-80,-75,82,-26,-86,-5,87,21,72,-95,14,-47,53,-53,114,53,-95,16,-21,82,33,-47,-85,-111,-6,56,74,27,-39,67,56,-105,-34,54,106,14,88,27,-69,23,-94,61,-76,-102,78,87,-105,-48,-66,70,-32, 
  /* [22][0][][] */ 41,-50,-75,-117,81,-65,97,64,-113,84,-80,-124,123,-108,-115,-96,45,84,-111,-71,97,-71,39,22,84,-20,-127,93,-67,-90,-59,-120,60,69,0,21,6,-14,-59,-121,3,-14,6,101,60,-117,95,-16,-54,-89,8,-27,-58,-86,-57,41,-5,-22,-31,-27,116,-71,-78,-106,-64,13,-113,-46,107,110,-15,-1,-63,-5,77,-86,35,-46,56,105,100,-98,-67,-123,79,91,106,-43,-51,29,-53,53,19,15,-37,107, 
  /* [23][0][][] */ 74,-82,0,49,98,-100,-1,-96,56,-79,88,66,21,-100,24,-41,92,-28,-120,114,99,-83,110,-41,-14,-27,84,5,56,50,79,-35,-27,53,-2,42,100,1,-117,3,-99,4,5,-104,-60,-85,121,31,90,-124,-89,-49,68,-49,-58,97,-74,-15,89,49,-107,-90,-48,1,41,37,-120,-120,67,-24,111,-68,-6,-24,-28,-94,44,-17,92,127,-52,-45,24,-102,98,13,118,-27,-88,45,98,-3,109,-45,-25,76, 
  /* [24][0][][] */ -64,-40,-112,-82,-92,-127,-78,-82,52,111,83,28,103,63,-37,-113,-71,47,19,-56,101,-77,-47,-38,41,-46,58,40,88,56,7,-53,6,17,32,37,-50,-73,54,-17,-61,-88,101,11,27,-28,50,71,-69,-59,-23,10,63,66,57,-68,8,85,15,6,93,-13,45,92,-88,97,-52,-83,-101,53,-46,-18,-37,27,100,94,56,-66,-103,-67,-69,-92,-53,-103,5,67,-6,-87,34,-97,12,-67,-12,29,-89,35, 
  /* [25][0][][] */ -87,-52,-49,13,89,-37,-87,67,40,-107,-36,31,80,3,-94,-18,-60,55,58,-109,66,100,-3,-48,13,-30,-86,67,101,-97,47,102,100,-106,82,70,104,-62,0,-8,-83,94,-103,8,92,38,57,51,-91,107,-68,0,67,-24,-56,17,-21,53,-88,78,111,63,46,51,-1,68,7,20,-67,-11,-14,-108,43,-105,77,38,64,78,24,20,42,55,-35,75,-70,-45,-93,-96,-19,-39,127,14,-114,-8,-19,-87, 
  /* [26][0][][] */ 52,-122,-43,-31,-103,-9,-18,-21,-114,-127,102,77,-74,-52,5,-21,108,26,-106,-72,10,62,94,7,46,57,6,24,-7,1,-97,-6,-25,-65,-121,-106,-72,81,-58,102,-104,98,52,27,-77,69,-45,96,-25,17,-5,95,-11,-51,-9,-110,94,62,43,20,1,-113,61,-19,111,-24,-69,37,-91,75,80,93,73,-101,-87,-6,42,-114,-104,8,-33,72,82,-79,75,-4,-50,10,-86,110,-13,13,-58,111,48,86, 
  /* [27][0][][] */ 14,7,-33,-74,-119,-71,-65,-20,53,99,36,-98,-19,59,85,-31,67,-15,74,-85,-96,18,-28,-24,-106,51,-86,21,93,26,-29,-12,72,69,-61,-90,-92,-66,-116,99,-97,17,26,15,100,23,68,105,98,103,58,-78,-81,-88,-8,-28,103,-27,-117,-78,-59,-36,-37,69,38,-49,-100,127,53,7,-126,8,57,-41,-10,-84,46,-67,93,104,86,-24,120,-59,-75,-85,-34,29,-49,-5,-10,-54,60,18,86,51, 
  /* [28][0][][] */ 87,-9,90,47,-119,-66,-100,-84,-33,-118,57,79,-84,-93,-2,100,92,111,-76,80,-34,19,-119,-83,-127,92,-79,-57,-69,-80,-7,-26,-114,12,92,70,13,-119,-46,32,103,39,-103,48,-119,-15,9,44,18,-66,-83,-33,-88,19,65,37,56,-19,97,49,-7,-48,-106,12,54,71,-27,96,-85,34,-114,-50,70,36,-12,-109,-119,-73,-93,41,-84,-91,118,-36,58,-123,63,-91,-112,-77,-28,-70,-42,51,-100,-71, 
  /* [29][0][][] */ 50,51,80,-32,-95,14,-120,7,108,-20,-97,-89,115,-110,-51,-51,-106,103,46,-73,-84,-27,55,5,-40,15,-36,-3,-81,-14,108,-9,56,-4,-52,-64,-13,102,-9,104,46,108,-49,82,-4,105,-61,-25,16,13,55,-103,87,-110,113,51,-105,53,-51,111,-127,121,-104,-49,-68,-71,68,116,98,-90,33,-79,117,82,59,34,115,-67,-29,28,-10,-81,-11,-85,63,117,43,77,-44,97,99,79,-110,14,-6,61, 
  /* [30][0][][] */ 28,-72,-69,36,-105,25,-72,-15,120,-18,-3,-45,-107,18,57,12,-7,35,98,-110,43,-110,-122,12,-119,23,-76,123,-14,-115,-99,6,-89,-77,-127,-59,14,-21,-5,24,92,-83,-16,103,106,-47,107,61,-77,80,18,-111,100,-56,-14,105,-86,-59,-87,-59,-111,-6,-79,-30,-115,-95,-103,96,-65,116,50,-38,-95,110,40,-93,-63,-78,-83,-64,29,28,-111,-23,-116,28,-116,114,-41,-126,81,58,-37,-5,8,-75, 
  /* [31][0][][] */ 78,-98,43,113,46,60,-63,-103,-34,-24,-83,-89,105,-127,-51,108,-65,-94,47,46,60,33,-35,103,41,-116,34,61,-63,-77,45,105,16,17,-71,-12,93,-35,-71,-115,57,-73,-34,28,1,-58,-44,22,68,33,95,-33,-98,-62,-84,22,-123,65,3,111,-42,0,83,-76,67,109,-47,-66,71,-123,-124,6,-101,-45,-1,2,-63,-51,47,87,-80,-46,57,70,53,93,-99,14,15,-56,-68,-59,9,101,-6,-26, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0019178666407242417, 0.0017966933082789183, 0.0019226880976930261, 0.0018402537098154426, 0.0017548110336065292, 0.0017906876746565104, 0.0020765708759427071, 0.0018620108021423221, 0.0017982005374506116, 0.0018606717931106687, 0.0018988701049238443, 0.0022400603629648685, 0.0019269341137260199, 0.0018216989701613784, 0.0018281230004504323, 0.0017384437378495932, 0.0017470704624429345, 0.0018243315862491727, 0.0022601664531975985, 0.0017423223471269011, 0.0017818817868828773, 0.001860622433014214, 0.0018039403948932886, 0.0018164991633966565, 0.0019484037766233087, 0.0019110054709017277, 0.0018174496944993734, 0.0017938148230314255, 0.0017401094082742929, 0.0017369142733514309, 0.0017115274677053094, 0.0018191273557022214, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -1506, 3512, 7196, 2504, -3916, -3485, 21021, 2032, 3482, -2268, 8165, -220, -8880, 2375, 18078, 6506, 14849, 6633, -3148, -6447, 4693, 30948, 25226, 14304, 961, 785, 5392, 2296, 2267, -4160, 6453, -3271, -365, 4492, -92, 990, 9825, 4068, -1807, 5821, 7254, 5276, 4457, 13852, 3984, 4370, 1340, 6709, 4944, -4706, -6643, 465, -213, -1214, 2374, -15, 184, -1094, -4929, 10728, -953, 1346, -1197, -1671, -4099, 7458, 23816, 2318, -2484, 760, 1862, 1865, 1968, -1427, 697, 9695, -406, 21923, 18353, -915, 12128, 2147, -405, 1317, 15939, 7823, 5304, 1564, 5769, 4889, -285, -10584, 696, -2247, -1722, -2184, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00040976371383294463, 0.00044863027869723737, 0.00033465365413576365, 0.00036213474231772125, 0.00027484173187986016, 0.00042256482993252575, 0.00015861522115301341, 0.00035275728441774845, 0.00017522832786198705, 0.00028102356009185314, 0.00024279044009745121, 0.00027313936152495444, 0.00028765149181708694, 0.0011902041733264923, 0.0001712820230750367, 0.00017579324776306748, 0.00012603226059582084, 0.00021923390158917755, 0.00060953025240451097, 0.00026156875537708402, 0.00013288436457514763, 8.7153181084431708e-05, 0.00012215344759169966, 0.00011817209451692179, 0.00019811751553788781, 0.00062251061899587512, 0.0005560066201724112, 0.00045957224210724235, 0.00024605350336059928, 0.0004710345237981528, 0.000228284508921206, 0.00023622051230631769, 0.00019704893929883838, 0.00025895232101902366, 0.00030409597093239427, 0.00025566658587194979, 0.00019297376275062561, 0.00026560027617961168, 0.00033921311842277646, 0.00030852048075757921, 0.00017376928008161485, 0.00049041729653254151, 0.00033652258571237326, 0.00016717107791919261, 0.00047978694783523679, 0.00023064337437972426, 0.00038439343916252255, 0.00031838694121688604, 0.00027480852440930903, 0.00027419280377216637, 0.00024010219203773886, 0.00017041436512954533, 0.0006563517963513732, 0.00024841009872034192, 0.00032496789935976267, 0.00033354805782437325, 0.00058601587079465389, 0.00025221871328540146, 0.00031325846794061363, 0.00017157284310087562, 0.00077942834468558431, 0.0005189622170291841, 0.00022330929641611874, 0.00045765965478494763, 0.00045911653432995081, 0.00026088164304383099, 9.1305046225897968e-05, 0.00018881917640101165, 0.00047008521505631506, 0.00042358890641480684, 0.00021739654766861349, 0.00026904002879746258, 0.0006868110504001379, 0.00030086465994827449, 0.00023479838273487985, 0.00022263880237005651, 0.00034410020452924073, 8.5878215031698346e-05, 9.9689132184721529e-05, 0.00019925400556530803, 0.00012171419075457379, 0.00015239127969834954, 0.00019432988483458757, 0.00017932012269739062, 0.0001139073574449867, 0.00030250800773501396, 0.00044113534386269748, 0.00018245421233586967, 0.00012457945558708161, 0.00041825472726486623, 0.00023450271692126989, 0.00018820881086867303, 0.00030338572105392814, 0.00046628544805571437, 0.00036845746217295527, 0.00019107028492726386, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -36,86,-8,-127,-52,-33,-32,-58,-18,24,-8,82,25,-64,2,44, 
  /* [1][0][][] */ -35,21,-56,-8,-30,-22,32,-79,54,55,-54,12,-4,-2,29,-127, 
  /* [2][0][][] */ -20,-4,-44,41,36,18,-76,-77,127,-23,-17,9,5,83,-64,17, 
  /* [3][0][][] */ 37,-75,4,-117,1,-41,0,-5,95,3,65,48,-22,39,28,127, 
  /* [4][0][][] */ -78,60,24,50,17,-13,-9,51,10,2,29,-17,-127,-7,-24,37, 
  /* [5][0][][] */ -3,63,112,-2,16,77,-72,73,-62,82,-31,-40,30,-53,-127,13, 
  /* [6][0][][] */ 27,-62,106,-127,29,-4,-31,83,-79,-86,43,-41,-6,77,-25,67, 
  /* [7][0][][] */ 37,112,-26,-52,85,2,1,-42,127,92,-32,26,33,-21,67,42, 
  /* [8][0][][] */ 7,-94,6,-94,21,-57,24,-80,22,68,70,-14,12,127,78,55, 
  /* [9][0][][] */ 4,-37,-4,127,43,-10,49,-65,-71,118,34,-27,-11,-70,-12,-14, 
  /* [10][0][][] */ -8,22,-56,-127,1,-4,-17,34,37,-32,7,-20,-7,-46,10,31, 
  /* [11][0][][] */ -3,11,20,-25,77,-36,97,-64,-91,48,-9,26,-8,127,-74,-42, 
  /* [12][0][][] */ 80,11,-127,-4,39,-70,23,45,13,54,-82,-47,-42,120,-6,26, 
  /* [13][0][][] */ -18,5,-25,7,7,-127,-1,17,2,-11,8,-4,10,-16,7,11, 
  /* [14][0][][] */ 19,-26,107,-25,72,6,-127,-92,-23,-53,41,19,1,-58,-28,-24, 
  /* [15][0][][] */ -66,39,-18,-44,8,15,127,50,-29,35,92,-33,1,92,58,9, 
  /* [16][0][][] */ 16,64,127,96,-5,29,99,70,-99,22,-86,-13,11,2,18,-95, 
  /* [17][0][][] */ -44,-110,-19,27,-77,-24,-58,12,-127,-27,9,-50,-5,37,66,-44, 
  /* [18][0][][] */ 6,38,5,54,36,-1,25,2,64,37,-32,-23,10,127,58,24, 
  /* [19][0][][] */ 2,-32,30,3,92,13,-86,-68,-104,-66,-43,-127,-46,-51,7,-44, 
  /* [20][0][][] */ 82,-45,-70,-42,-1,-107,17,16,-51,49,-127,-24,20,-6,35,-16, 
  /* [21][0][][] */ 81,-11,58,-4,-4,4,-19,87,5,-98,68,45,9,127,36,86, 
  /* [22][0][][] */ -37,31,-53,127,-69,-1,104,63,-18,50,-29,35,-8,-2,44,-15, 
  /* [23][0][][] */ 63,-6,85,-95,48,-16,2,45,7,28,-10,-30,-2,-24,-127,12, 
  /* [24][0][][] */ -127,41,13,-21,6,109,32,-22,-6,17,106,-14,-86,18,55,-27, 
  /* [25][0][][] */ 24,22,12,19,11,17,69,-54,-7,-127,-15,-22,-14,-32,12,17, 
  /* [26][0][][] */ -35,-5,1,11,-44,-15,-39,-32,-106,-39,4,-31,13,127,-35,56, 
  /* [27][0][][] */ 0,33,11,61,41,-23,-21,-28,63,4,-23,-3,4,127,-13,15, 
  /* [28][0][][] */ 7,82,62,78,127,-17,40,51,-97,-26,-54,-26,11,91,48,-36, 
  /* [29][0][][] */ -5,-7,3,11,23,-6,14,31,-24,-6,-19,-127,-6,-19,-12,-1, 
  /* [30][0][][] */ -18,87,-46,80,-37,-20,38,-127,-41,53,-13,2,62,41,79,93, 
  /* [31][0][][] */ -37,-28,-4,-62,1,-4,-52,-104,24,69,-5,-127,-31,-37,-1,27, 
  /* [32][0][][] */ -127,-80,-9,56,58,45,-11,2,-6,-44,-102,40,71,0,56,69, 
  /* [33][0][][] */ -19,-50,-37,-14,-90,-6,-79,-2,61,25,8,-56,26,-127,126,25, 
  /* [34][0][][] */ 64,4,57,33,57,28,-33,98,-75,-38,82,35,8,9,-24,127, 
  /* [35][0][][] */ -45,46,-74,12,-14,-9,31,-116,78,95,-88,-4,2,-11,76,-127, 
  /* [36][0][][] */ -38,30,17,117,46,34,127,16,-23,45,-22,-27,-16,19,-83,-51, 
  /* [37][0][][] */ -1,-16,21,-78,8,4,-30,-44,-88,-7,11,-19,-7,-127,50,-40, 
  /* [38][0][][] */ 39,89,-5,-44,127,-5,32,-34,112,69,-10,-5,1,-25,40,17, 
  /* [39][0][][] */ -34,60,-16,-127,-21,7,-45,32,47,-64,-34,-15,19,66,52,22, 
  /* [40][0][][] */ 14,-21,12,-85,-9,-9,-8,-42,-127,-8,-10,-23,1,-104,92,-65, 
  /* [41][0][][] */ -12,-19,-48,-19,3,-22,23,-10,-31,20,-48,-12,-127,8,19,28, 
  /* [42][0][][] */ 127,90,-27,-11,-73,-54,-28,-45,11,15,81,-42,-50,51,108,-100, 
  /* [43][0][][] */ -1,127,-87,9,70,-27,100,-27,68,80,-55,11,43,-118,-79,-46, 
  /* [44][0][][] */ -20,-5,2,-38,53,7,-89,-127,-13,-4,5,4,3,-40,77,-70, 
  /* [45][0][][] */ -3,48,-127,-29,26,-78,13,-78,16,18,12,-62,32,-15,60,-9, 
  /* [46][0][][] */ 7,0,-23,-83,-16,11,16,-29,-112,-18,3,19,-2,-127,75,-36, 
  /* [47][0][][] */ 21,46,26,-13,127,-13,-28,16,-51,37,-1,21,8,3,105,-25, 
  /* [48][0][][] */ -127,-79,-18,27,64,16,16,-26,-8,-14,-99,33,52,4,68,46, 
  /* [49][0][][] */ 10,14,93,83,119,-3,44,36,-127,-50,-38,-74,22,124,25,-55, 
  /* [50][0][][] */ 38,-12,-78,-6,38,-127,-46,-12,-16,-33,9,-35,40,-11,-3,20, 
  /* [51][0][][] */ 15,47,51,19,37,10,-5,31,-127,56,13,-117,18,-115,-33,100, 
  /* [52][0][][] */ 1,49,10,41,51,4,26,44,53,72,-17,-41,29,127,55,31, 
  /* [53][0][][] */ -10,-57,-16,-23,-85,-8,-73,1,42,27,8,-63,24,-127,115,11, 
  /* [54][0][][] */ 60,-7,-35,16,127,82,-120,-37,-69,-15,-25,-66,9,-35,-21,-29, 
  /* [55][0][][] */ 51,-5,11,7,44,-45,-74,-127,-33,-79,-55,15,-2,-23,15,-1, 
  /* [56][0][][] */ -21,9,19,-24,-10,-26,-86,62,-13,127,-8,-18,24,1,-2,3, 
  /* [57][0][][] */ 3,18,-45,-17,-50,-52,111,87,-22,24,-15,2,34,26,127,-6, 
  /* [58][0][][] */ 49,25,-127,40,99,107,-40,51,-104,-45,4,12,-36,27,-5,-17, 
  /* [59][0][][] */ -98,63,110,16,-68,-61,127,120,15,3,36,-22,9,11,61,2, 
  /* [60][0][][] */ 9,-5,-57,1,15,-127,-25,-2,-6,-11,-11,-20,35,-19,9,1, 
  /* [61][0][][] */ 12,-9,17,127,65,11,31,14,-89,4,10,47,-10,15,40,-56, 
  /* [62][0][][] */ -54,127,12,-54,-36,-13,-64,53,-26,-58,-97,-63,-13,-102,-53,-47, 
  /* [63][0][][] */ -50,21,-36,127,-88,12,-68,-37,-60,-20,-34,-30,30,61,49,39, 
  /* [64][0][][] */ 14,7,8,47,8,14,-18,69,32,-2,-12,-41,-6,-127,48,2, 
  /* [65][0][][] */ -21,-35,1,-127,34,-45,68,-33,-4,56,-1,-102,-9,-7,30,-57, 
  /* [66][0][][] */ 33,-3,74,-12,13,1,-1,96,3,-91,62,24,-16,127,4,86, 
  /* [67][0][][] */ -6,43,-19,-127,-14,-7,-55,32,76,-93,-35,0,34,78,79,38, 
  /* [68][0][][] */ -25,39,127,16,15,3,-10,4,-34,-22,-15,-29,17,-14,84,-27, 
  /* [69][0][][] */ 127,81,-16,4,-84,-31,-32,-30,11,16,82,-46,-53,59,76,-94, 
  /* [70][0][][] */ 41,8,-62,-6,-32,26,48,127,-30,97,-44,13,20,64,-19,17, 
  /* [71][0][][] */ 9,-4,-2,6,8,-73,6,19,-38,14,-70,-1,-127,-1,33,49, 
  /* [72][0][][] */ 9,19,-127,10,12,17,34,98,-42,-27,15,-14,16,17,-7,4, 
  /* [73][0][][] */ -49,22,40,3,46,-32,-73,-127,19,-71,35,-20,8,-49,38,-20, 
  /* [74][0][][] */ -3,28,40,123,18,-4,-83,88,-77,22,-59,38,18,-127,37,-104, 
  /* [75][0][][] */ -15,22,-50,5,23,-6,27,-14,114,29,-5,-14,5,127,-53,-3, 
  /* [76][0][][] */ 4,-11,3,22,6,-11,-15,65,15,-35,-15,-127,-7,-2,5,17, 
  /* [77][0][][] */ -22,22,-26,127,-62,25,95,100,4,53,-19,31,-23,-27,-13,-24, 
  /* [78][0][][] */ -5,-8,22,-127,41,-37,-27,32,15,-39,-2,-49,17,115,23,34, 
  /* [79][0][][] */ -24,-106,-84,-67,-92,-5,30,-89,127,25,22,52,14,38,40,-59, 
  /* [80][0][][] */ -59,-19,110,-112,6,-39,26,-112,-76,67,-66,-127,26,97,104,-63, 
  /* [81][0][][] */ -48,43,-127,24,69,-122,-10,51,-8,-41,68,-8,23,0,5,-6, 
  /* [82][0][][] */ 127,-10,-6,21,14,-119,-26,16,-16,-13,-106,4,114,6,0,31, 
  /* [83][0][][] */ -32,84,-127,-80,-40,-24,39,-122,74,47,-45,-119,22,58,61,111, 
  /* [84][0][][] */ -41,30,74,-43,14,-20,69,-127,-52,48,-3,-70,26,52,57,-5, 
  /* [85][0][][] */ -80,125,29,-127,-69,-21,-24,-4,-60,-1,-69,17,4,-10,-99,-33, 
  /* [86][0][][] */ -4,8,-41,5,-37,-32,127,23,5,-24,-9,15,14,33,100,-19, 
  /* [87][0][][] */ -20,-44,7,-123,13,-38,49,-13,-7,14,-5,-127,-14,7,13,-35, 
  /* [88][0][][] */ 95,-39,35,-22,20,-101,15,21,-67,48,-127,-67,31,24,68,-8, 
  /* [89][0][][] */ 25,-28,-35,-63,35,-9,-25,-6,-61,-1,46,-79,127,0,21,-37, 
  /* [90][0][][] */ 3,-46,48,-59,76,3,-75,93,55,-98,-30,-26,-14,127,11,-116, 
  /* [91][0][][] */ -40,-3,-29,-38,23,-22,-38,-108,15,59,-4,-127,-27,-10,0,18, 
  /* [92][0][][] */ -22,22,41,18,1,-127,9,6,4,-25,-2,-10,6,-23,22,7, 
  /* [93][0][][] */ 43,-18,127,-10,-45,55,26,-24,-18,19,-63,-18,-20,3,25,8, 
  /* [94][0][][] */ 31,5,-10,-17,29,-8,-19,-2,-27,-22,18,-52,127,-13,35,-26, 
  /* [95][0][][] */ 127,94,0,40,-92,-13,-74,-2,-19,-16,85,-39,-38,27,76,-78, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00106208142824471, 0.0011628210777416825, 0.00086740095866844058, 0.00093863013898953795, 0.00071237224619835615, 0.0010952610755339265, 0.00041112056351266801, 0.00091432436602190137, 0.00045418067020364106, 0.00072839518543332815, 0.00062929734122008085, 0.00070795981446281075, 0.00074557436164468527, 0.0030849333852529526, 0.00044395207078196108, 0.00045564488391391933, 0.00032666759216226637, 0.00056824029888957739, 0.0015798636013641953, 0.00067796953953802586, 0.00034442779724486172, 0.00022589549189433455, 0.00031661393586546183, 0.00030629453249275684, 0.00051350798457860947, 0.0016135078622028232, 0.0014411337906494737, 0.0011911819456145167, 0.00063775497255846858, 0.001220891484990716, 0.00059169891756027937, 0.00061226851539686322, 0.00051073828944936395, 0.0006711878813803196, 0.00078819738700985909, 0.00066267151851207018, 0.0005001756944693625, 0.00068841897882521152, 0.00087921880185604095, 0.00079966540215536952, 0.00045039891847409308, 0.0012711304007098079, 0.00087224511662498116, 0.00043329678010195494, 0.0012435772223398089, 0.00059781293384730816, 0.00099632330238819122, 0.00082523864693939686, 0.00071228615706786513, 0.0007106902776286006, 0.00062232959317043424, 0.00044170315959490836, 0.0017012220341712236, 0.00064386316807940602, 0.00084229611093178391, 0.00086453533731400967, 0.0015189157566055655, 0.00065373483812436461, 0.00081194599624723196, 0.00044470585999079049, 0.0020202286541461945, 0.001345116994343698, 0.00057880347594618797, 0.0011862246319651604, 0.0011900007957592607, 0.00067618855973705649, 0.0002366568660363555, 0.00048940727720037103, 0.0012184309307485819, 0.0010979154612869024, 0.00056347798090428114, 0.00069733458803966641, 0.0017801704816520214, 0.000779822061304003, 0.00060858245706185699, 0.00057706556981429458, 0.0008918858366087079, 0.00022259085380937904, 0.00025838788133114576, 0.00051645369967445731, 0.00031547542312182486, 0.00039498848491348326, 0.00050369068048894405, 0.00046478633885271847, 0.00029524060664698482, 0.00078408146509900689, 0.0011433947365731001, 0.00047290968359448016, 0.00032290202216245234, 0.0010840896284207702, 0.00060781609499827027, 0.0004878252511844039, 0.00078635645331814885, 0.0012085821945220232, 0.00095501827308908105, 0.000495242013130337, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -8484, 14154, -15271, -2879, -10584, 9279, 28278, -56246, -3075, 17077, 24926, 15643, -9100, 12019, -7243, 13883, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00072444661054760218, 0.000424703408498317, 0.00025893599377013743, 0.00020008489082101732, 0.00040568574331700802, 0.0003324124263599515, 0.00033029384212568402, 0.00025729651679284871, 0.00029357965104281902, 0.00023310804681386799, 0.00060896162176504731, 0.0005434257909655571, 0.00039230941911228001, 0.00018890557112172246, 0.00042593336547724903, 0.00042407508590258658, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -20,-10,-1,-36,19,-12,-36,-3,15,1,-7,1,-3,-7,-29,8,-2,9,-8,-3,10,-31,5,4,5,17,3,127,34,-30,39,-6,-5,11,4,2,-8,15,-32,-1,-10,3,1,31,2,14,14,4,24,4,-12,6,19,-21,-10,81,1,6,-29,-38,-8,23,-1,-25,-36,-68,-17,39,10,10,17,-20,-9,-37,-2,-21,-23,17,-2,9,-6,-25,21,22,1,-8,-11,-91,6,-12,3,-2,48,-34,-37,-8, 
  /* [1][0][][] */ 30,-61,-80,-61,127,-22,63,31,-14,-87,-49,-23,9,-7,-62,39,-62,14,40,36,22,36,-16,-49,8,1,-13,-62,35,-9,-61,38,-28,33,6,7,17,1,10,24,-27,30,-35,-29,-44,84,14,8,24,-67,5,-43,-12,34,52,16,-59,-24,-40,-39,18,-14,1,-42,-75,94,-16,-20,2,-28,-22,6,47,-109,-30,7,38,-48,36,11,10,-17,17,3,-44,37,-22,30,35,-31,-8,12,31,6,29,102, 
  /* [2][0][][] */ -8,48,-68,-8,79,81,26,71,-11,-106,7,-13,0,-6,20,39,6,-20,-42,60,26,10,72,11,47,16,-11,-32,39,-18,32,-48,38,35,-27,28,-127,-86,14,20,11,-44,8,-7,24,-28,8,68,-16,22,-16,-4,67,-3,-15,49,30,8,37,7,19,18,26,-21,18,7,-44,-2,-50,6,-10,-26,-35,-66,14,65,57,34,24,-9,30,-50,13,-7,-32,32,15,46,-25,28,12,-26,-4,-32,-55,-8, 
  /* [3][0][][] */ 58,16,103,-16,61,-36,18,-9,-30,-72,19,-51,1,42,33,127,16,-12,26,16,125,6,39,14,68,-30,-24,18,44,40,-17,103,-103,34,25,-9,-36,-36,-19,41,-86,-34,72,14,27,48,-51,-96,-50,-37,-55,45,-8,-123,-7,20,-115,71,59,41,16,95,-21,-58,47,83,-21,-56,21,-22,-4,-65,55,-35,65,-8,8,-13,50,42,-40,-90,18,-23,-26,22,24,45,22,18,26,40,29,106,43,-43, 
  /* [4][0][][] */ 16,1,20,-19,127,31,0,-23,-45,-53,-27,-33,-35,19,-15,62,29,-81,-36,82,-12,9,28,-18,-5,-8,7,-28,10,-16,44,-33,80,21,-26,15,34,15,2,13,-18,-15,-22,-19,-10,-52,-8,15,43,13,-21,5,-16,-36,4,-20,24,-15,-27,24,-9,50,61,23,47,45,-32,-1,-50,0,41,62,8,-70,-45,-24,31,24,71,-34,-1,-40,-1,-6,-56,7,36,53,-52,37,-2,-45,11,5,24,-26, 
  /* [5][0][][] */ 0,-7,-15,3,29,-23,43,-30,-26,-48,-6,0,9,29,-7,25,-4,-6,10,-3,35,19,-41,59,16,-7,4,-90,0,22,4,32,-6,10,-1,-56,17,19,-14,14,-1,-15,28,-19,-12,-3,8,-14,-11,-13,8,-20,-12,-29,-6,-46,-6,10,-17,12,64,13,4,33,3,53,-6,76,5,87,11,27,8,5,-3,73,-25,-17,10,10,-2,-13,-8,21,-1,19,-15,127,-6,31,-6,-17,0,10,-58,12, 
  /* [6][0][][] */ 19,-70,11,-40,-33,4,31,14,11,-6,-12,-74,-29,-5,-33,23,20,-1,-2,-10,-36,34,15,12,-28,4,-19,-8,-23,20,37,-1,51,14,62,4,3,-9,22,-94,-18,84,9,-39,8,-26,-16,22,-10,41,-31,67,-15,-63,-14,-7,1,-63,-15,-3,-17,58,33,-76,35,-34,12,-24,-1,2,127,1,-44,6,-29,27,-85,-6,11,10,35,47,10,2,-17,-5,34,26,17,12,42,-41,-17,-10,-36,-9, 
  /* [7][0][][] */ 11,127,55,20,120,61,37,-28,-23,-31,33,-8,-35,23,27,21,9,-45,4,27,31,-34,38,11,-11,7,17,5,17,-16,16,23,54,-11,-41,4,20,5,-5,80,-54,36,16,32,-5,-24,23,-30,-30,-36,40,16,21,-37,-41,44,56,7,-22,4,-8,-45,-10,-4,-62,83,-27,-98,-15,-36,-3,74,-12,-22,13,6,52,68,49,-12,-53,-41,-2,-12,-24,50,-2,-8,-25,24,-32,-38,-44,-12,29,2, 
  /* [8][0][][] */ -8,6,54,18,-127,-30,42,-18,28,84,63,7,-8,16,26,13,-48,9,3,7,-40,9,-117,61,17,-31,65,-11,0,9,-1,42,79,-22,3,-11,-23,-12,-1,33,18,-33,38,6,-40,-5,40,10,-105,11,23,23,-61,-31,-29,42,13,-45,-81,-14,17,-32,-27,-14,3,78,-8,-56,11,-9,-37,-30,41,46,49,-8,-22,-46,-10,21,-78,8,-21,-10,21,20,65,37,25,-32,52,45,1,-11,47,15, 
  /* [9][0][][] */ 24,-115,-20,31,89,95,-35,-22,35,-36,85,95,-38,12,101,-102,10,-27,-2,13,-53,-56,30,-16,-25,4,0,26,-34,3,17,-17,24,15,-99,30,7,15,-13,66,27,-66,-15,63,7,-8,-77,-44,20,16,-18,-91,60,31,-18,-51,-1,88,-11,6,20,-50,-35,127,-99,-10,-4,-12,1,26,-59,-80,52,-1,-6,25,60,-58,33,5,-12,-23,16,24,-13,-72,25,-16,-5,-51,-53,47,-55,2,-1,-51, 
  /* [10][0][][] */ -56,-15,-36,-52,-24,-12,67,-27,30,15,37,30,37,-10,-12,5,-11,26,-32,-12,-8,36,17,15,-10,-9,6,-127,31,-45,50,-28,-3,28,-12,-7,-8,35,3,-4,14,-41,19,-54,6,-9,24,20,-1,43,-29,-21,-39,-26,-4,-55,17,11,-3,-45,20,6,1,3,-27,88,-18,-34,16,-31,-4,-23,-34,-16,20,60,-4,32,-26,17,-16,-4,1,31,16,-17,-11,122,3,0,10,16,24,-48,42,-32, 
  /* [11][0][][] */ -83,19,-6,-4,23,-68,-20,-3,-51,-2,-6,15,31,27,-28,-2,48,4,-69,-47,16,-1,-6,0,80,12,67,-6,-16,33,-43,26,-9,21,-12,-15,-9,6,29,10,-25,-5,1,-8,80,15,70,11,43,37,-10,34,17,-64,28,-6,-69,-21,-33,-47,-8,-15,0,21,-6,-30,31,1,29,12,-9,29,-22,12,32,9,-17,83,-127,66,-44,1,-71,-68,123,24,36,-12,15,50,-34,-53,-28,45,-30,4, 
  /* [12][0][][] */ -7,-9,-32,5,66,19,8,-13,-19,19,20,-1,5,-16,32,-4,-30,-19,10,-16,-4,-23,-40,40,-21,37,-17,90,-19,27,-33,-9,-9,29,10,34,-19,-16,12,12,-3,-12,3,7,-10,3,24,31,-4,-2,-1,-29,-22,12,-15,-16,-14,-5,18,26,-11,-14,2,43,35,-68,7,55,-32,-127,5,47,8,7,6,75,5,-17,-6,0,4,14,-36,2,6,-12,4,-44,-14,18,9,-13,-35,36,-8,15, 
  /* [13][0][][] */ -87,67,-3,-6,-69,0,-10,17,-32,-33,42,19,90,6,-21,0,-12,38,-54,-11,23,-11,44,-57,57,38,-1,5,5,-22,-33,-104,-86,-36,5,1,-11,17,35,-16,-27,85,-8,18,44,-2,-7,13,60,-4,40,76,57,-55,74,-26,-25,59,36,14,12,33,-21,10,11,-14,10,9,5,26,30,-127,8,-26,-85,5,45,40,-47,-42,90,-31,-2,-27,51,-39,99,-3,-10,-5,-13,18,44,-44,-16,19, 
  /* [14][0][][] */ -25,16,-19,-49,40,-1,-15,29,-84,8,15,13,-34,-56,-73,-30,-87,-17,78,13,27,-11,24,-101,-39,25,-42,-26,14,-12,-2,-41,-70,-34,28,14,-12,4,14,4,0,86,-76,-18,-51,27,6,6,127,-29,21,-13,37,51,-100,22,-23,27,-101,12,8,31,43,31,-1,21,6,10,-43,20,59,37,33,-3,-22,25,59,-66,-24,-101,11,-27,9,45,26,-64,-45,3,-35,20,30,52,14,42,19,-11, 
  /* [15][0][][] */ -52,-82,0,-40,-2,19,-3,-69,-27,12,4,-27,50,-17,52,-13,-97,-11,-19,24,-27,11,-71,-50,-14,-5,-2,22,-26,-19,67,-93,2,32,23,8,-7,15,-103,-4,34,-74,-6,36,-20,-53,49,36,59,25,-12,-127,-13,50,-11,39,32,-6,-13,51,6,-2,37,-7,12,4,-17,-14,-34,27,16,43,-41,10,-5,-37,-40,-16,3,3,-1,40,-2,66,-18,-50,-29,-28,-48,63,38,76,-44,-3,7,-16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.030788980424404144, 0.018049893900752068, 0.011004779487848282, 0.0085036074742674828, 0.017241643741726875, 0.014127527363598347, 0.014037488028407097, 0.01093510165810585, 0.01247713528573513, 0.0099070919677615166, 0.025880869477987289, 0.023095596581697464, 0.016673149541020393, 0.0080284867435693741, 0.018102167174220085, 0.018023191019892693, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 19787, 59348, -2012, -1030, 14146, -7358, -236, 32, 4843, 13473, -3386, -432, 692, 5159, 4692, -8645, -4160, -256, -1144, 11559, -11250, 19220, -4212, 8314, 36243, 223, -6956, 16301, 14825, -17897, 765, 22014, 24884, -9108, 2007, 677, -398, -1310, 3869, -8873, -5811, -1539, -2499, -113, 30394, -2137, 12285, -1504, -11874, 1054, 61, 406, -3331, 20284, -4276, 12410, 17271, -121, 38677, -61, -8713, -448, 876, -432, -2369, 13634, -1971, -5056, -3748, 3794, -199, -6044, 683, -80, -2299, -6210, -1069, -1015, 43626, -6349, -5312, -10973, -46, -56, 54277, -14174, -9747, -26439, -6693, 10022, -1620, 37305, -261, -1839, -1962, 802, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00011859235382871702, 9.7944532171823084e-05, 0.00013887809473089874, 0.00029756303410977125, 0.0002519895788282156, 0.00010627294977894053, 5.8371017075842246e-05, 9.8164906376041472e-05, 0.00030681848875246942, 0.00017942408157978207, 0.00025893049314618111, 0.00010799767915159464, 0.00034176360350102186, 0.0002125275059370324, 0.00050171581096947193, 0.00017482406110502779, 0.00018744883709587157, 0.00021601494518108666, 0.00020240245794411749, 9.4994902610778809e-05, 7.6369200542103499e-05, 5.2849063649773598e-05, 0.00016331058577634394, 8.8404936832375824e-05, 8.8462031271774322e-05, 0.00011867455759784207, 0.00018032295338343829, 0.00020348318503238261, 7.8818658948875964e-05, 0.00056443072389811277, 0.00054260221077129245, 0.00026200956199318171, 0.00012353503552731127, 0.00017677646246738732, 0.00022957022883929312, 0.00045551499351859093, 0.0003448238130658865, 0.00017851132724899799, 0.00033832259941846132, 8.5726169345434755e-05, 0.00022261741105467081, 0.00032679966534487903, 0.00047505306429229677, 0.00011159370478708297, 0.00040866684867069125, 0.00012511067325249314, 0.00010484106314834207, 0.00035232250229455531, 0.0010474114678800106, 0.0001101445232052356, 0.00049047521315515041, 0.00024114942061714828, 0.0001444666413590312, 0.00013790834054816514, 0.00019199325470253825, 0.00012852944200858474, 0.00016219227109104395, 0.00050381419714540243, 3.8323058106470853e-05, 0.00018734757031779736, 0.00031664271955378354, 0.00042875509825535119, 0.0001007205864880234, 0.00014373990416061133, 0.00016411376418545842, 0.00014836425543762743, 0.00026916747447103262, 0.00042790052248165011, 0.00019983616948593408, 0.00010734219540609047, 0.00022407274809665978, 0.00011804528185166419, 0.00031178054632619023, 0.0001436700695194304, 0.00031445032800547779, 0.00030245160451158881, 0.00013964380195830017, 6.8567656853701919e-05, 5.9197176597081125e-05, 0.00020327443780843168, 0.00027164877974428236, 0.0002701098273973912, 0.00016986964328680187, 0.00028806665795855224, 6.6109860199503601e-05, 0.00010477413889020681, 8.8111119111999869e-05, 0.00069425161927938461, 0.00027027435135096312, 0.0001319584553129971, 0.00035787472734227777, 2.8394842956913635e-05, 0.00018407368042971939, 0.00014112432836554945, 0.00039923450094647706, 0.00035689206561073661, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-10,127,22,70,78,-58,-15,-18,-15,-5,-30,1,36,0,-9,-42,26,22,20,-127,127,6,-83,6,50,-28,-127,-127,40,26,12,29,61,-19,-30,-10,31,-7,-13,28,-107,70,25,-68,38,45,-18,52,-26,19,4,-7,17,49,-91,-49,-61,-18,-11,-1,11,38,68,-25,76,13,-7,16,19,127,24,23,26,-1,-10,17,127,-6,-14,14,-29,20,127,21,-76,-16,1,-31,-16,-39,2,-25,-15,25, 127,-127,76,107,-43,127,40,-117,69,4,-17,127,127,-96,-13,15,11,127,127,-111,127,-77,80,68,-127,-116,-65,-34,-54,46,-59,-20,-89,55,-127,-84,-42,-15,-52,63,0,127,127,83,-50,-112,-113,-51,-15,-127,43,84,68,-31,45,82,-46,41,-78,-112,-45,-43,-61,68,73,-62,27,30,-80,32,-18,91,118,127,13,19,2,58,-34,53,65,127,127,-23,-9,76,-111,127,-118,-101,4,-127,-89,-127,-37,104, -74,-12,31,-83,15,-24,65,-7,80,-35,-27,19,-19,-4,-9,-13,-9,-16,7,-3,-24,-106,29,-1,-124,97,9,-54,119,49,-15,10,1,15,15,-29,-9,33,19,13,25,13,-117,64,19,-17,37,13,-14,12,-18,4,-9,1,-3,20,-65,6,-33,53,2,40,33,-1,-6,-39,-30,23,11,3,-4,36,10,-24,-5,4,-12,-6,-86,2,-21,-24,-18,3,-111,10,-33,-22,-49,25,-26,-31,29,-26,-14,0, 
  /* [0][1][][] */ -64,-74,75,-36,-48,95,18,127,-51,-22,0,-118,26,-114,78,31,-3,-60,-17,89,55,-72,48,49,-96,-12,127,-22,-24,63,124,-102,-127,92,-86,-56,-36,31,-29,96,-50,-25,-5,46,-48,127,-23,66,16,96,20,-2,13,-55,28,32,127,121,-73,-84,127,-34,-35,127,72,-38,-15,-1,127,39,127,97,-40,102,-6,12,15,13,-31,9,-43,124,-81,109,2,34,-55,31,79,-127,-32,-7,127,-69,-22,0, 66,126,58,-115,127,84,87,37,-127,127,127,-38,-67,-127,-127,127,127,-64,-123,-50,102,95,-122,127,-108,-90,-42,127,-127,108,-127,-127,-87,127,108,127,127,-127,-106,127,-66,-95,109,-127,-127,-35,-127,-127,127,-112,87,42,127,127,127,-127,101,-127,-127,127,19,-81,-127,-98,-127,127,-127,127,-123,-127,-108,-84,-127,-78,127,127,-127,127,-79,127,127,29,-42,-127,60,127,93,46,127,12,127,3,-68,34,127,-127, -53,-12,-49,38,-56,-96,33,-27,19,-34,-29,93,1,92,13,10,-5,63,-6,127,1,-88,-41,6,-75,106,-70,-20,-69,-17,18,-61,-71,36,6,-17,-28,44,-68,42,127,-4,-39,29,-39,-58,16,45,8,120,-12,6,-36,-72,4,18,96,2,-1,22,-35,127,91,-51,-43,12,38,-11,-76,122,-19,-86,-1,-53,-16,-20,27,16,75,-36,-70,-43,56,15,-49,-16,72,23,15,63,-44,22,-43,96,-26,-6, 
  /* [0][2][][] */ -67,2,-3,-20,13,-44,66,25,55,-29,-36,-2,18,18,-26,2,-7,64,6,0,-53,-84,2,-8,-27,-54,35,-68,91,38,26,26,14,-8,-11,-46,-6,35,-3,0,-16,-5,-67,104,4,32,11,36,-15,-32,11,-20,23,-1,9,15,-72,24,-16,14,14,-1,-21,-4,-1,-46,-46,16,-31,13,25,30,13,-20,27,4,18,4,-78,-12,-8,-9,17,14,-125,6,12,-43,-56,-50,-28,-49,10,57,-19,-10, 120,34,-127,-35,-72,-24,37,30,-65,-30,-20,-108,-78,111,-13,37,3,-50,-10,-126,91,-54,-39,1,-110,127,-50,21,-36,-22,-9,-6,-63,14,28,6,-22,-28,127,54,11,-14,69,-35,-38,77,-68,-44,-33,-5,-127,-127,-49,-26,2,40,-65,-7,11,39,-8,-19,8,-46,-54,34,64,-21,115,109,-24,-70,11,-57,3,4,100,3,51,22,12,-98,-50,2,4,7,127,39,-59,39,-19,-111,41,78,-10,24, -54,13,-17,27,16,-67,-127,1,-11,-8,-16,4,14,-26,19,-1,-9,-16,4,16,-50,-70,12,0,18,-96,21,3,-47,-40,-7,16,40,-21,-6,-24,-34,3,41,-40,22,-1,-48,-35,3,67,23,16,-9,-3,11,-9,19,5,-4,-6,-63,-12,2,-37,-12,9,84,-10,35,-2,-2,27,2,4,-5,20,-18,16,-1,14,36,-1,73,-11,3,-9,-7,-17,73,-1,43,-39,59,40,-17,-55,-7,1,-15,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0050401748158037663, 0.0041626426391303539, 0.0059023192152380943, 0.012646429240703583, 0.010709556750953197, 0.0045166001655161381, 0.0024807681329548359, 0.0041720084846019745, 0.0130397854372859, 0.0076255234889686108, 0.011004545725882053, 0.0045899013057351112, 0.014524952508509159, 0.0090324189513921738, 0.02132292278110981, 0.0074300225824117661, 0.0079665752127766609, 0.0091806352138519287, 0.0086021041497588158, 0.0040372833609580994, 0.0032456910703331232, 0.0022460850887000561, 0.0069406996481120586, 0.003757209749892354, 0.0037596363108605146, 0.0050436686724424362, 0.0076637254096567631, 0.0086480351164937019, 0.0033497929107397795, 0.023988306522369385, 0.023060593754053116, 0.011135405860841274, 0.0052502388134598732, 0.0075129992328584194, 0.0097567345947027206, 0.019359387457370758, 0.014655011706054211, 0.0075867311097681522, 0.014378709718585014, 0.0036433620844036341, 0.0094612399116158485, 0.013888985849916935, 0.020189754664897919, 0.0047427322715520859, 0.017368340864777565, 0.00531720370054245, 0.0044557452201843262, 0.014973705634474754, 0.044514987617731094, 0.0046811420470476151, 0.020845197141170502, 0.010248850099742413, 0.0061398320831358433, 0.0058611044660210609, 0.0081597128883004189, 0.00546250119805336, 0.0068931714631617069, 0.02141210250556469, 0.0016287299804389477, 0.0079622715711593628, 0.013457315042614937, 0.018222091719508171, 0.0042806249111890793, 0.0061089457012712955, 0.0069748349487781525, 0.0063054808415472507, 0.011439617723226547, 0.018185772001743317, 0.0084930369630455971, 0.0045620431192219257, 0.0095230918377637863, 0.0050169243477284908, 0.013250673189759254, 0.006105977576225996, 0.013364138081669807, 0.012854192405939102, 0.0059348614886403084, 0.002914125332608819, 0.002515879925340414, 0.0086391633376479149, 0.011545072309672832, 0.011479667387902737, 0.0072194598615169525, 0.012242833152413368, 0.0028096688911318779, 0.0044529009610414505, 0.003744722343981266, 0.029505694285035133, 0.01148665975779295, 0.0056082340888679028, 0.015209675766527653, 0.0012067807838320732, 0.0078231310471892357, 0.0059977839700877666, 0.016967466101050377, 0.015167912468314171, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2280, 7988, 13717, 28946, 14604, -3223, -1945, 6564, 29042, -3862, 10501, 5147, 11204, 13382, 26436, 1819, 2134, 9154, 13364, 7644, -215, 551, 13965, -1263, 3868, 37, 12468, 8661, 7575, 44132, 61164, 19746, 7977, -1204, 10727, 2702, 1550, 4737, 28290, -1035, 13123, 10339, 43209, -4330, 24162, 11826, 6943, 22380, 72532, 10586, -712, 10126, -3279, -130, -2277, 7096, -540, 15570, 6134, 7598, 7231, 25315, 7764, 6828, 14420, 9544, 5617, -6912, 8004, -2980, 6573, 9205, 20782, 7214, -4494, -6115, 8403, 456, 2811, -1344, 24486, 12521, 5395, 11401, 4199, 433, 10447, 79612, 10500, 12709, 5974, -197, 7897, 11235, 7019, 16440, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00017305344226770103, 0.00018615370208863169, 0.00013662865967489779, 7.9229423135984689e-05, 0.00020348973339423537, 0.00032100395765155554, 0.00041058103670366108, 0.00024532232782803476, 8.0325327871832997e-05, 0.00035456276964396238, 0.00025464565260335803, 0.00016917582252062857, 0.00011584380990825593, 0.00017318842583335936, 8.98293437785469e-05, 0.00030642870115116239, 0.00020439708896446973, 0.00013523126835934818, 0.000165176359587349, 0.00015451743092853576, 0.00025457382434979081, 0.00044810189865529537, 0.00014318869216367602, 0.00051653728587552905, 0.00067755120107904077, 0.0001716016122372821, 0.00017819879576563835, 0.00016271640197373927, 0.0002158838469767943, 8.0116275057662278e-05, 4.6838016714900732e-05, 0.0001252805523108691, 0.00020791232236661017, 0.00019772180530708283, 0.00018644359079189599, 0.00021508333156816661, 0.00032096137874759734, 0.00031356883118860424, 9.6936688350979239e-05, 0.00054173934040591121, 0.00014444171392824501, 0.00015170976985245943, 6.2428400269709527e-05, 0.00024679690250195563, 0.00013411376858130097, 0.00012942217290401459, 0.00024820695398375392, 0.00011933307541767135, 5.6926637626020238e-05, 0.00019917977624572814, 0.00017603140440769494, 0.00017082657723221928, 0.00032680146978236735, 0.00030901073478162289, 0.00045861786929890513, 0.00015780424291733652, 0.00018056853150483221, 0.00012124058412155136, 0.00033448610338382423, 0.00019219775276724249, 0.00022414751583710313, 5.5974145652726293e-05, 0.00018909420759882778, 0.00014287618978414685, 0.00017201260197907686, 0.0002034239296335727, 0.00022813909163232893, 0.00019482133211567998, 0.00020856878836639225, 0.0002408692380413413, 0.00017040093371178955, 0.00017149957420770079, 0.00010023931827163324, 0.00013946135004516691, 0.00034373244852758944, 0.00022497285681311041, 0.00019725189486052841, 0.0002926900633610785, 0.00026364601217210293, 0.00029333613929338753, 8.2781814853660762e-05, 0.00013422613847069442, 0.00016486816457472742, 0.00017022549582179636, 0.00027407705783843994, 0.00019749740022234619, 0.00022319560230243951, 4.8143236199393868e-05, 0.00013298206613399088, 0.00017717921582516283, 0.00021413418289739639, 0.00040591906872577965, 0.00018537645519245416, 0.00014343022485263646, 0.00015923517639748752, 0.00010463386570336297, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -1,67,-29,66,17,29,3,-25,36,43,-68,102,15,-127,54,-123, 
  /* [1][0][][] */ 20,59,-5,-29,33,-36,127,-117,-3,84,-8,-12,2,-53,28,9, 
  /* [2][0][][] */ -127,22,-42,-33,-11,1,43,80,-43,59,94,-30,-71,4,38,-56, 
  /* [3][0][][] */ -72,55,32,71,-58,50,57,113,21,77,-127,20,51,-64,-66,-45, 
  /* [4][0][][] */ 18,-1,44,71,-22,61,1,54,1,-20,-3,1,28,-2,-127,-20, 
  /* [5][0][][] */ -16,-38,47,-25,2,-22,-10,19,-67,105,-40,-127,-24,13,-43,-31, 
  /* [6][0][][] */ 2,7,24,-12,31,46,-58,-70,-11,5,47,-7,127,-26,-13,-33, 
  /* [7][0][][] */ 37,23,127,-7,-30,-43,-9,-10,-79,29,-76,-37,12,-8,44,-21, 
  /* [8][0][][] */ 14,20,88,64,-53,80,10,53,42,5,-2,-90,-27,0,-127,-81, 
  /* [9][0][][] */ 19,-98,44,63,19,-30,8,15,127,5,82,3,-15,7,-122,-31, 
  /* [10][0][][] */ -50,-106,9,-28,-106,19,-21,48,103,127,51,-40,-44,66,83,-4, 
  /* [11][0][][] */ 31,-21,-7,-105,10,-22,-113,-127,-51,57,-25,-31,37,-41,54,-69, 
  /* [12][0][][] */ -3,13,4,-38,-30,-32,-98,-3,-31,-72,-41,25,22,127,82,39, 
  /* [13][0][][] */ -44,-109,-78,40,0,-69,9,-18,66,5,-26,-19,34,33,127,39, 
  /* [14][0][][] */ 4,-53,44,37,30,29,-4,127,28,45,-3,-26,21,39,-42,118, 
  /* [15][0][][] */ 27,-29,-14,68,4,-22,126,12,9,-127,2,-29,8,-40,2,-51, 
  /* [16][0][][] */ 43,-74,-35,27,12,15,30,-59,127,55,99,5,4,100,61,111, 
  /* [17][0][][] */ -105,-88,68,122,127,91,28,-5,110,-54,-31,-70,28,89,-109,24, 
  /* [18][0][][] */ -11,10,-9,17,-97,-3,-23,30,-65,-9,-18,-43,8,-127,66,4, 
  /* [19][0][][] */ 48,-55,78,-61,127,71,-103,121,121,-82,83,51,-50,85,36,119, 
  /* [20][0][][] */ 50,-17,78,-60,-3,17,-31,59,-11,-50,93,-11,13,21,-48,127, 
  /* [21][0][][] */ -63,-25,-6,-48,9,6,-82,-52,-34,73,-6,5,-127,-24,44,-14, 
  /* [22][0][][] */ 29,-24,19,-28,8,-68,9,-11,-127,37,-20,-49,-23,-16,81,-19, 
  /* [23][0][][] */ 12,6,20,-10,9,8,-13,0,-11,-11,48,-16,127,-8,-5,-34, 
  /* [24][0][][] */ -18,3,0,-62,-18,-19,33,2,-55,-9,0,-127,2,-91,29,14, 
  /* [25][0][][] */ -127,-5,-23,2,67,-35,-84,-123,-30,48,-47,-38,-61,-75,28,-34, 
  /* [26][0][][] */ 36,1,44,-89,122,-22,-2,0,127,-51,43,-30,-9,75,-2,66, 
  /* [27][0][][] */ 91,-28,21,-30,-32,-49,-9,-23,-27,17,-127,17,16,-17,2,40, 
  /* [28][0][][] */ -127,-28,-122,-94,70,-10,69,-59,0,45,-62,5,56,0,-52,59, 
  /* [29][0][][] */ -64,-38,6,127,3,27,-5,-39,-7,-9,-63,36,16,-59,17,-32, 
  /* [30][0][][] */ 38,-1,127,-22,63,51,-40,75,-37,-75,32,-31,-13,15,-64,53, 
  /* [31][0][][] */ 6,-80,3,-40,7,-57,18,-49,-13,33,111,17,-29,91,55,127, 
  /* [32][0][][] */ -7,67,-30,38,-127,29,-76,-37,-55,-35,-5,54,10,55,35,59, 
  /* [33][0][][] */ 17,-20,19,127,4,-17,27,-58,-127,56,54,-9,18,-10,16,113, 
  /* [34][0][][] */ 40,7,4,4,71,-51,-127,-22,-40,99,-54,16,-19,8,15,7, 
  /* [35][0][][] */ 87,28,-17,15,25,-127,-45,-16,-37,-7,-82,-18,84,21,-18,26, 
  /* [36][0][][] */ 20,0,-127,12,41,14,-35,18,-26,-18,2,-7,9,14,-11,15, 
  /* [37][0][][] */ 1,-3,127,-12,-61,29,19,-63,-19,24,-53,13,21,-11,17,1, 
  /* [38][0][][] */ -127,31,1,34,30,67,20,-16,18,-21,123,-22,-45,17,-15,-27, 
  /* [39][0][][] */ -12,-9,19,37,35,-9,-127,33,9,25,-3,-31,-6,-20,-3,-9, 
  /* [40][0][][] */ 7,80,-26,127,6,37,59,33,-75,-27,-19,58,25,36,-47,-34, 
  /* [41][0][][] */ 1,4,-24,-25,-35,6,127,85,-50,64,-14,-11,-4,62,24,-8, 
  /* [42][0][][] */ 43,-52,-32,-21,28,50,-69,73,84,-104,127,52,-10,37,-50,41, 
  /* [43][0][][] */ -65,-6,18,-43,28,16,-84,-77,-27,48,-12,-16,-127,-25,46,-9, 
  /* [44][0][][] */ 0,7,-12,-5,-3,-21,-6,-49,127,-4,17,47,14,79,3,43, 
  /* [45][0][][] */ -58,-73,19,-91,27,11,-21,59,27,-88,-12,-24,17,119,-36,127, 
  /* [46][0][][] */ -47,13,-30,80,-82,-27,-6,-77,-127,30,-36,-6,-4,26,8,-29, 
  /* [47][0][][] */ -31,5,-112,127,5,78,9,-24,14,56,70,67,-23,-18,20,-29, 
  /* [48][0][][] */ -10,3,39,-127,29,-40,-30,-1,-49,9,20,-16,-7,67,110,52, 
  /* [49][0][][] */ -30,5,45,104,-15,29,-76,-29,2,-45,-95,-26,-31,-50,-67,-127, 
  /* [50][0][][] */ -8,55,21,-127,57,38,-20,49,122,-14,-40,-7,3,-48,15,-31, 
  /* [51][0][][] */ 14,-17,19,-5,43,-2,-55,-127,19,-68,-5,2,-12,-13,-8,-6, 
  /* [52][0][][] */ 15,27,-1,41,32,-3,-62,95,-75,127,-40,-37,71,99,1,-48, 
  /* [53][0][][] */ -15,107,4,-103,-33,0,32,-40,-64,-51,-55,52,10,-127,-110,-14, 
  /* [54][0][][] */ -7,6,14,36,52,-31,2,-41,1,34,-9,-23,-10,127,-41,-10, 
  /* [55][0][][] */ -116,127,95,-27,49,2,-13,1,-53,28,105,-20,-19,-21,114,-21, 
  /* [56][0][][] */ 48,-9,26,-114,92,-5,0,45,46,-52,52,127,-50,19,102,57, 
  /* [57][0][][] */ -20,-1,13,72,-34,11,45,127,-8,12,1,-20,9,44,16,21, 
  /* [58][0][][] */ 25,127,5,-112,12,40,-19,26,109,-13,-1,85,13,-77,36,71, 
  /* [59][0][][] */ 51,70,61,-127,-34,-4,23,-13,7,14,46,-88,-26,-123,-86,25, 
  /* [60][0][][] */ 44,-3,107,-35,-30,127,27,-29,-5,27,-52,-3,29,14,21,1, 
  /* [61][0][][] */ -30,46,-46,-49,-51,14,121,127,-10,89,-18,9,2,86,14,-49, 
  /* [62][0][][] */ 4,13,-1,-16,-80,52,-82,-4,-35,-26,12,-72,8,-127,90,8, 
  /* [63][0][][] */ 7,-46,-9,-91,51,3,-127,-121,-54,109,-28,16,64,-6,28,-38, 
  /* [64][0][][] */ -31,-11,29,45,69,-3,-37,-127,25,-103,-11,-34,0,-30,2,3, 
  /* [65][0][][] */ -127,21,24,-60,13,79,57,-54,-84,42,57,-14,-4,22,-18,-34, 
  /* [66][0][][] */ 45,-3,99,21,-62,43,3,66,-52,7,54,-90,-14,63,-127,-35, 
  /* [67][0][][] */ 23,-43,-26,50,44,-30,-85,-107,29,-127,-76,-34,-83,-2,-60,17, 
  /* [68][0][][] */ 13,-21,-60,56,-56,-107,-6,-64,-42,-21,50,-72,-35,61,127,-20, 
  /* [69][0][][] */ -27,40,-63,65,-5,-107,23,75,30,0,59,-18,127,41,-28,9, 
  /* [70][0][][] */ 9,5,-43,-40,-32,14,127,83,-25,53,-13,9,9,35,10,-10, 
  /* [71][0][][] */ 5,-20,-26,-54,23,5,12,59,-37,-44,-19,-4,16,-127,71,11, 
  /* [72][0][][] */ 28,27,-18,27,15,-45,-50,-127,9,71,-48,15,49,46,53,48, 
  /* [73][0][][] */ -55,-127,-37,-69,-88,-12,45,-32,-16,19,-43,-45,16,-58,67,-11, 
  /* [74][0][][] */ -23,28,67,111,-7,11,-127,103,19,-32,-45,-36,-4,-7,-21,-8, 
  /* [75][0][][] */ -43,31,-27,9,-16,86,92,127,-8,45,7,-23,-102,81,5,25, 
  /* [76][0][][] */ 12,-31,-37,-28,45,-88,-127,-114,-15,-12,8,-17,54,1,77,-43, 
  /* [77][0][][] */ -27,10,-35,-22,-45,-1,-6,-39,127,7,-60,6,-10,45,22,-82, 
  /* [78][0][][] */ -103,-127,-15,99,77,75,-41,16,-14,-75,-101,77,44,-33,99,62, 
  /* [79][0][][] */ 41,-14,31,-45,127,11,49,18,81,22,5,26,-2,-24,11,-35, 
  /* [80][0][][] */ -11,-30,58,-119,-28,-36,-3,1,-76,-54,-2,-42,11,127,-29,25, 
  /* [81][0][][] */ 14,-5,37,33,13,43,-5,-15,14,-2,-1,-40,5,41,-127,10, 
  /* [82][0][][] */ -72,-37,34,-127,-13,-43,0,-33,-32,-37,-44,-115,-5,-99,-89,39, 
  /* [83][0][][] */ 7,12,-22,-60,-35,23,-4,50,-69,-6,11,-77,35,-127,9,47, 
  /* [84][0][][] */ 126,48,27,64,-47,16,-71,26,-1,-34,127,11,-79,15,80,-85, 
  /* [85][0][][] */ 2,-21,20,-23,45,8,-42,127,-80,-118,-61,-30,-18,83,85,-121, 
  /* [86][0][][] */ 29,4,10,-1,-52,66,-39,45,-103,-54,46,-33,-21,-127,-24,26, 
  /* [87][0][][] */ 127,-36,14,-5,-41,-31,19,14,9,15,-110,12,30,-3,-13,37, 
  /* [88][0][][] */ 48,66,-40,-11,-25,-29,-40,-31,89,-2,17,46,4,-49,127,-92, 
  /* [89][0][][] */ 49,62,-73,-27,-24,-12,20,-80,47,31,52,-47,-52,0,-31,-127, 
  /* [90][0][][] */ -6,-32,-2,-65,-74,5,127,-55,94,-64,5,-69,48,-12,-29,-6, 
  /* [91][0][][] */ 13,7,-17,-91,-43,2,29,-35,-45,21,65,45,20,-16,29,127, 
  /* [92][0][][] */ 18,12,0,16,47,-6,-73,-127,46,-56,5,-28,-38,-14,-1,-22, 
  /* [93][0][][] */ 69,-1,49,-127,-39,-7,-18,54,41,-68,65,-22,-36,106,-19,17, 
  /* [94][0][][] */ -115,40,-97,5,62,-127,-17,-7,-11,-44,98,-41,-9,-9,-28,-17, 
  /* [95][0][][] */ -19,66,39,-127,5,3,-10,16,28,-33,-48,-85,-12,45,-80,-28, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00060385145479813218, 0.00064956344431266189, 0.00047675109817646444, 0.00027646258240565658, 0.00071005563950166106, 0.0011201089946553111, 0.0014326785458251834, 0.00085602595936506987, 0.00028028662200085819, 0.0012372088385745883, 0.00088855874491855502, 0.00059032090939581394, 0.0004042245855089277, 0.00060432247119024396, 0.00031344988383352757, 0.0010692501673474908, 0.00071322178700938821, 0.00047187504242174327, 0.00057636521523818374, 0.00053917203331366181, 0.00088830816093832254, 0.0015636036405339837, 0.00049964163918048143, 0.0018024016171693802, 0.0023642424494028091, 0.00059878546744585037, 0.0006218056078068912, 0.00056778144789859653, 0.00075330358231440187, 0.00027955716359429061, 0.00016343624156434089, 0.00043715309584513307, 0.00072548777097836137, 0.00068992906017228961, 0.00065057497704401612, 0.00075051025487482548, 0.0011199603322893381, 0.0010941649088636041, 0.00033825018908828497, 0.0018903414020314813, 0.00050401390762999654, 0.00052937498548999429, 0.0002178372087655589, 0.00086117134196683764, 0.00046797562390565872, 0.00045160483568906784, 0.00086609163554385304, 0.00041639999835751951, 0.00019863940542563796, 0.00069501652615144849, 0.0006142427446320653, 0.00059608108131214976, 0.0011403387179598212, 0.0010782598983496428, 0.0016002979828044772, 0.00055064103798940778, 0.00063007458811625838, 0.00042305604438297451, 0.0011671534739434719, 0.00067065347684547305, 0.00078213878441601992, 0.00019531579164322466, 0.00065982399974018335, 0.00049855117686092854, 0.00060021958779543638, 0.00070982601027935743, 0.00079606694635003805, 0.00067980820313096046, 0.00072777847526594996, 0.00084048742428421974, 0.00059459579642862082, 0.00059842941118404269, 0.0003497743746265769, 0.00048663545749150217, 0.0011994176311418414, 0.00078501872485503554, 0.00068828935036435723, 0.0010213106870651245, 0.00091996457194909453, 0.0010235650697723031, 0.0002888582821469754, 0.00046836776891723275, 0.00057528982870280743, 0.00059398362645879388, 0.00095636252081021667, 0.00068914605071768165, 0.0007788171642459929, 0.00016799067088868469, 0.00046402667067013681, 0.00061824789736419916, 0.0007471982971765101, 0.0014164111344143748, 0.00064685131656005979, 0.00050048442790284753, 0.00055563409114256501, 0.00036510868812911212, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -1427, 2462, -13486, 31892, 25635, 5926, -3446, -5874, 23872, 1398, 29457, 25502, -10865, 12337, 33959, -28319, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00041360961040481925, 0.00024899575510062277, 0.00023304292699322104, 0.00022788869682699442, 0.00035814402508549392, 0.00029565775184892118, 0.00033421855187043548, 0.00032567247399128973, 0.00019745789177250117, 0.00025764631573110819, 0.00032267492497339845, 0.00063568330369889736, 0.0004150449822191149, 0.00040129086119122803, 0.00045611249515786767, 0.00029125166474841535, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 1,22,-8,23,38,63,-25,-30,39,-2,7,10,-12,13,16,67,-3,-4,-6,-8,90,-57,3,-20,-23,-39,-44,-84,-4,-9,49,42,110,-10,8,2,9,-23,-23,4,-32,17,22,-26,3,-27,-12,26,-16,23,5,-13,-33,-16,7,-6,42,20,-26,-23,-63,30,-11,-5,9,5,56,4,13,12,0,-19,-69,-9,-3,1,-9,-89,3,-14,30,-18,-50,-48,27,-15,6,21,-7,7,22,-29,18,16,-14,127, 
  /* [1][0][][] */ 76,-95,43,94,-20,-77,-8,-52,-33,-98,-14,31,2,-73,-41,-53,-95,1,29,33,-44,-116,-44,33,127,-78,-84,18,-38,92,-13,54,6,16,-35,26,-20,-13,48,-32,0,-73,85,-30,-58,9,64,-11,31,33,8,-72,72,-91,44,-23,28,21,-25,-106,35,-67,18,-48,-3,-97,34,49,46,67,-45,0,-112,35,-13,79,39,88,10,-16,33,11,-77,32,-84,64,-7,60,-43,23,31,10,0,-53,31,2, 
  /* [2][0][][] */ 27,12,13,-26,2,-2,-5,44,66,-14,11,69,0,17,48,10,-8,-12,19,-13,-20,-62,3,-51,-2,-16,-30,31,2,25,123,-62,21,-71,-31,62,26,127,-46,-19,3,-25,4,32,-45,-48,-67,24,27,32,-39,-31,18,-3,0,-29,-18,0,4,37,2,14,79,89,12,-80,27,-75,-12,-23,-14,12,-18,8,-16,12,22,65,8,21,23,86,35,-12,-5,1,20,10,34,-5,-6,-51,-48,3,-4,70, 
  /* [3][0][][] */ -18,-19,-25,34,20,-23,7,-23,-16,17,0,6,7,-16,38,-5,33,-40,15,9,-15,-7,-14,-3,-22,11,11,0,26,-40,57,-19,11,-11,-16,48,-10,-14,-10,3,11,-67,17,-25,-2,2,2,11,-127,45,-18,21,-116,-51,-31,-38,26,11,-8,57,-7,17,11,12,-11,-85,-28,21,59,15,3,32,-46,5,-16,-54,-47,-55,28,-37,21,-23,21,67,38,55,30,14,29,-10,-7,8,-31,-4,-19,-18, 
  /* [4][0][][] */ -9,-30,8,-63,-5,-17,-41,7,-26,-37,-33,-9,10,68,16,10,51,-8,10,5,-12,24,45,10,-6,-7,14,20,7,-10,-3,-5,-38,1,-5,17,41,-27,-6,-11,10,1,-91,-24,33,-6,-13,-15,-1,70,-13,-11,-29,-20,9,-12,-4,-27,33,37,7,13,13,-12,36,-111,30,-18,-46,14,-19,11,-17,10,-21,29,-20,66,51,9,19,7,127,-32,40,-25,-6,-2,63,2,-6,16,-40,18,-3,-36, 
  /* [5][0][][] */ -7,-3,-10,-3,-19,-12,6,115,54,-16,-20,-36,-12,25,39,29,-20,-14,8,-36,-58,-18,-10,-48,12,0,22,91,83,9,76,52,-51,15,-5,0,-48,-56,-42,-11,-43,-14,-2,-9,73,8,4,8,6,11,-24,10,-39,-23,7,0,-19,-14,-1,43,-58,36,-22,-45,11,8,-17,8,-9,14,3,5,28,11,14,0,0,34,8,126,6,-44,29,33,13,-9,27,-28,6,-34,18,-127,-46,-28,-10,-116, 
  /* [6][0][][] */ -20,0,-14,-49,-9,-22,-10,18,-8,18,-19,2,41,-53,7,-15,0,-66,25,16,-5,1,-23,21,75,-14,-5,3,19,-10,16,-11,-20,-6,-18,1,19,8,15,38,-7,-21,-42,-12,-5,-26,23,-127,16,34,18,13,7,-3,1,-39,36,-13,-5,7,23,25,8,9,33,55,28,-19,-23,-10,8,-20,13,9,49,0,-27,33,1,1,-16,-7,50,-27,3,37,16,-24,29,7,-30,-10,-28,5,-9,11, 
  /* [7][0][][] */ 13,10,36,-28,-2,7,-7,-22,-1,-8,-11,-12,-3,-85,21,7,-4,-34,-19,-12,13,-15,-31,-4,-21,-6,5,-21,13,10,5,-3,-9,7,-10,-20,-3,-8,-23,31,8,-17,-24,32,-1,10,-12,75,3,26,-20,-23,-22,8,-8,-43,35,3,0,2,-3,1,-14,-8,-17,41,10,-28,-9,-11,6,34,-3,-3,-12,3,48,6,1,-20,5,-34,31,2,-30,127,-8,-1,-26,-19,-4,20,-19,2,-8,4, 
  /* [8][0][][] */ -71,36,-48,3,38,-6,-7,33,9,69,-41,13,13,32,70,-18,0,28,-71,11,16,25,-36,2,-46,-24,18,23,50,-84,-2,-2,18,-7,13,-4,-14,28,-45,39,13,11,8,-127,-40,-8,47,-15,-45,15,-10,71,-104,75,14,-15,17,-19,-25,-15,-7,-36,2,24,-26,32,29,-26,-12,1,30,84,-25,24,36,29,1,-86,0,-37,-14,-16,21,-1,-60,8,22,-47,3,33,-26,3,22,-19,-17,-12, 
  /* [9][0][][] */ 25,-62,-31,-43,23,26,-29,15,32,-13,1,6,-41,-20,-2,24,-11,9,38,-19,-25,4,-23,-42,41,15,31,-15,-39,-32,-24,-7,-7,26,18,28,0,39,-31,16,11,9,-27,-89,13,-5,23,-127,-27,-4,9,25,-15,8,-15,4,-49,30,-11,10,10,7,5,24,26,116,29,42,4,-13,5,-25,-4,7,-38,13,64,-11,17,14,-24,8,2,-45,-5,24,-12,-10,-53,31,-39,6,13,16,9,-15, 
  /* [10][0][][] */ 29,52,-30,39,62,-124,-13,-24,-3,48,27,-4,-5,15,18,-82,14,35,-18,42,-97,-16,-15,-27,-67,-35,-65,62,19,7,5,41,-10,-22,34,-10,80,-21,-21,-6,-17,76,51,-22,-58,-15,-42,8,-27,-19,-42,-7,-23,-17,2,-13,16,30,-24,-11,1,19,-18,23,8,39,69,29,24,-6,28,65,-54,-21,-52,-10,6,39,-24,4,38,-8,-69,-29,67,-58,100,-11,-15,7,21,-18,74,33,-15,-127, 
  /* [11][0][][] */ 44,41,-28,26,-10,16,56,7,-6,-21,-25,-12,-3,-3,32,1,-3,-11,-99,-8,2,15,5,-12,-46,-24,-13,0,6,20,4,-6,-11,5,11,25,7,14,-7,15,6,32,58,-100,29,-37,4,-2,-127,15,6,-53,28,18,-14,12,-11,-16,3,4,10,-21,-13,10,-55,52,-19,8,17,-2,30,12,-56,-32,11,25,-1,-41,-56,5,6,-5,91,45,6,-7,-15,-12,5,24,-20,-5,-4,6,-25,12, 
  /* [12][0][][] */ -25,-10,9,-4,-22,34,16,-3,127,8,-12,2,4,14,-30,-39,27,26,13,71,52,24,-14,-18,6,11,17,-19,-99,11,29,-36,3,-11,-13,-15,22,-5,39,-10,-49,-22,-7,7,4,27,0,-4,17,4,-44,15,5,-3,10,-6,65,-21,13,17,11,-13,16,-13,-2,30,-39,4,-7,7,-19,-27,13,14,-72,6,20,-10,15,-55,-11,6,37,35,-16,-17,-24,-21,8,10,-6,51,-15,-19,8,14, 
  /* [13][0][][] */ 27,-8,-28,32,30,0,12,5,-5,6,7,2,18,-14,10,-16,20,-76,-39,15,-10,-23,11,6,7,13,3,0,-6,-31,-5,9,2,3,9,42,20,-1,7,21,4,9,27,44,17,14,-8,-127,20,-7,2,9,-17,0,21,9,-12,18,27,17,7,25,-4,1,-5,-17,-20,-59,6,11,-11,-34,-17,39,-7,23,-24,4,18,-3,36,-19,-9,18,16,29,12,22,5,-1,23,-7,1,15,-14,-9, 
  /* [14][0][][] */ -117,-52,29,47,28,-22,-34,9,-13,7,-10,12,62,10,-127,-1,78,-15,-13,25,-12,-6,43,13,-106,15,32,-26,-45,-74,-31,2,-4,4,31,-63,22,29,3,16,19,39,-9,-36,14,122,72,61,-103,52,1,30,-47,-2,37,-10,12,7,56,50,28,40,5,51,-1,-10,-50,41,7,77,-51,-88,-73,-4,-12,47,-15,30,80,-1,48,20,25,20,37,16,44,27,20,48,67,-12,2,32,27,-30, 
  /* [15][0][][] */ 96,-30,40,4,-6,80,44,-12,-18,51,7,6,-82,-6,-11,39,21,48,54,-18,7,18,-98,72,25,18,46,8,29,44,-61,-85,3,-64,50,6,55,-31,-66,-104,-3,30,7,38,4,56,-28,-38,109,-43,-56,25,39,-127,55,-118,-4,-61,13,20,-125,7,26,25,82,-24,-56,50,-37,70,-29,32,39,29,21,-7,19,-47,68,-11,-11,2,41,76,-21,-8,6,-54,2,-10,64,-10,-72,57,27,-17, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017578408122062683, 0.010582319460809231, 0.0099043240770697594, 0.0096852695569396019, 0.015221120789647102, 0.012565454468131065, 0.014204287901520729, 0.013841079548001289, 0.0083919605240225792, 0.010949968360364437, 0.013713683933019638, 0.027016540989279747, 0.017639411613345146, 0.017054861411452293, 0.019384780898690224, 0.01237819530069828, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 11528, -8792, 3797, 50467, -1814, -5063, -10513, 2495, -2848, 1161, 2831, -2210, 215, -937, 6250, -5847, -1727, 16919, 26969, 2401, 1900, -2255, -183, 717, 16442, -281, -1658, -4017, -5912, -8649, 5265, -8969, -653, -1743, -998, 14883, 618, -4343, 20231, 148, -780, 1735, -9587, -7850, -7169, 71720, -757, 15121, 23283, -12863, -459, 8022, 5377, -484, -4505, 2672, -13642, 1383, 2109, -6365, -1834, -1062, -14291, -1212, 1684, 16038, 30207, 22260, -10968, 170, -7344, -858, 61628, 11047, -180, 764, 19041, 33404, -803, -7828, -1438, -5862, 991, -3577, 913, -522, 1187, -312, 1376, -2975, 105, -476, -1575, -580, 173, 48966, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00017739259055815637, 0.00014002402895130217, 0.00026455841725692153, 4.1547111322870478e-05, 0.00015788614109624177, 0.00016068854893092066, 0.00031273916829377413, 8.4591403719969094e-05, 0.00015097516006790102, 0.00043833279050886631, 0.0001574341586092487, 0.00030480712302960455, 8.2202073826920241e-05, 0.00052085216157138348, 0.00016323009913321584, 0.00014750870468560606, 9.4976967375259846e-05, 0.00026217655977234244, 5.9618090745061636e-05, 0.00023454467009287328, 4.9499740271130577e-05, 0.0002212969702668488, 0.0001648821635171771, 0.00036961035220883787, 0.00022252340568229556, 0.0002646741340868175, 0.00014247652143239975, 0.0001903256488731131, 0.00012304654228501022, 8.4506507846526802e-05, 0.00013679837866220623, 0.00017400382785126567, 0.00014274334535002708, 0.00014427564747165889, 0.00019302942382637411, 0.00016188988229259849, 0.00044193732901476324, 0.00012988578237127513, 4.8022626288002357e-05, 0.00018579507013782859, 0.00020587425387930125, 0.00031102128559723496, 0.00036259344778954983, 0.00013270720955915749, 0.0001734171382850036, 5.0021710194414482e-05, 0.00029311841353774071, 0.00023566788877360523, 0.00010623488196870312, 0.00019067773246206343, 0.00019281539425719529, 0.00015712904860265553, 0.00028631879831664264, 0.00036357270437292755, 0.00033516073017381132, 0.00059472344582900405, 0.00026109555619768798, 0.00019643339328467846, 0.00011094524234067649, 7.7240998507477343e-05, 0.00032625903259031475, 0.00016015571600291878, 0.00026245921617373824, 0.00012740588863380253, 0.0002200686139985919, 0.00018499647558201104, 8.1266844063065946e-05, 7.9521647421643138e-05, 0.00037909677485004067, 0.00024808011949062347, 0.00023604022862855345, 0.00010859865869861096, 9.3024391389917582e-05, 0.00013596964708995074, 0.00016240845434367657, 0.00028335221577435732, 0.00049414735985919833, 6.6190739744342864e-05, 0.00031003652838990092, 0.00024806149303913116, 0.00016150946612469852, 0.00036785201518796384, 0.00010757948621176183, 0.00015675675240345299, 0.00013016613957006484, 8.8611195678822696e-05, 0.00015247044211719185, 0.00019334242097102106, 0.0002055310906143859, 0.00012803480785805732, 0.00020256494462955743, 0.00010551336163189262, 0.00016487695393152535, 0.00059505779063329101, 0.0071532903239130974, 8.3931343397125602e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,7,-20,105,-18,23,-62,-54,17,-7,99,-10,3,-8,-4,54,5,16,-35,3,74,2,32,-34,2,18,45,49,21,14,24,48,-7,28,9,-15,5,47,-58,-26,20,8,27,18,-85,-56,26,-5,-10,-20,-8,-7,49,6,-9,1,-3,-35,28,-32,26,-1,127,26,-13,-11,10,-52,67,35,2,-7,79,-34,69,4,16,-127,30,66,0,16,127,-14,37,29,-29,-20,34,-7,-14,82,2,19,-2,12, -49,12,-8,9,51,-8,-10,-127,38,13,-127,-5,-16,-11,5,91,18,-31,-14,-16,77,-96,127,26,-61,-30,-104,-16,27,37,-48,18,120,12,-14,-2,-24,127,-62,-127,9,-19,-29,15,46,-127,127,-44,-76,51,49,7,39,-63,31,56,36,42,-101,84,127,35,4,-20,42,-38,-95,-2,37,-31,-20,48,-47,-50,105,-4,-30,-60,-32,65,-67,63,-15,10,-12,49,55,-42,-28,54,-13,71,-127,-31,23,-127, 0,-4,-23,-76,7,19,39,22,-3,-2,5,62,0,-12,-11,6,-12,17,-15,17,8,24,24,-32,1,-31,11,13,-7,6,46,-78,43,17,9,-23,13,4,-29,-20,8,3,-16,9,23,-32,21,1,6,-7,4,-5,5,6,-5,8,-8,44,7,-4,11,-17,3,-17,-27,-17,30,-51,-107,-7,40,-19,-127,-24,-12,16,9,-12,6,11,-14,23,-35,-3,-41,21,25,35,-25,-17,24,-11,21,6,-1,-47, 
  /* [0][1][][] */ -40,59,-18,38,-86,-15,-11,-44,26,94,-45,-22,-30,-25,-6,62,127,-24,-90,-13,59,-127,-28,15,-35,-46,-127,-6,38,35,-49,28,-127,-74,-55,3,67,-3,-49,47,-19,86,1,-4,35,-53,-12,-31,127,44,-3,20,44,10,-36,-18,31,10,-126,127,-38,-88,21,127,-60,-35,-84,126,-38,127,-18,54,-34,-54,36,8,-35,-69,127,48,127,36,6,-1,127,29,-97,48,-38,-35,-102,40,100,102,29,-59, 127,127,127,127,-47,-127,127,23,127,-127,15,-127,-106,127,127,127,-15,-127,-61,-127,127,22,-67,127,127,127,-55,-127,127,127,-127,127,-8,-127,-123,127,-127,-44,99,110,-127,-127,127,127,127,-119,-106,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-106,-27,-70,-67,127,127,-70,127,127,-107,-127,127,-41,127,-127,-127,-127,123,-75,127,-43,127,80,127,-38,-127,-25,-108,-127,-127,-23,-127,-21,-127,-127,117, -24,66,-38,1,127,70,-21,48,5,23,-13,-4,-25,-30,-12,-6,-102,-22,-127,39,31,76,-11,-116,-33,-40,125,72,11,35,72,9,125,-46,127,-4,56,5,-92,14,36,24,-23,0,-23,-54,-12,-43,80,15,-12,39,-5,-3,-74,-14,24,20,127,-91,1,127,0,-36,-111,-28,-74,99,14,-17,113,23,-18,-57,11,46,-29,-7,-43,-4,-46,8,48,24,-90,36,127,-49,33,-22,127,-9,-113,34,34,18, 
  /* [0][2][][] */ -5,-41,-21,-61,-5,13,40,32,-1,9,-20,52,24,-35,-6,7,41,2,12,21,-10,30,-16,-26,2,-23,10,3,-10,-8,50,-74,-38,69,-27,-26,32,-35,-64,17,9,9,-33,20,12,-77,-11,-1,-9,7,17,-8,7,1,-21,5,-1,44,-49,34,-5,-12,5,17,-5,-10,21,-53,-58,11,-21,-12,-116,-32,0,17,14,-12,55,17,23,22,-40,15,12,25,-21,10,4,25,22,-7,22,40,-6,-29, -28,-12,-27,23,-45,73,-24,66,6,-6,54,-12,127,-7,-17,-16,-1,-41,-59,23,-23,78,-44,-112,-47,-46,102,69,13,45,54,-1,-122,64,-15,-23,-28,-27,-127,-3,44,-14,-14,37,-26,-44,-17,-48,-60,28,69,24,-11,-80,30,51,17,26,75,-55,20,-57,-9,0,20,-26,-127,-55,-12,-26,-63,23,36,-47,-29,-7,-44,23,-57,1,49,35,18,10,6,63,-93,127,15,127,-30,-19,118,-21,47,83, -10,-35,-26,28,13,64,-43,12,4,-7,-1,14,12,-50,-9,-12,-43,-6,17,19,-25,5,-20,3,-4,20,-2,50,-2,-5,34,29,19,43,19,-23,-6,-27,-29,8,12,-12,21,9,-73,-32,-12,4,-2,-15,0,-4,-8,9,-17,-6,-2,-50,14,-29,-21,49,9,-29,-9,-3,33,-55,45,7,53,-21,29,-56,-18,22,10,11,-6,22,-30,32,90,-14,-18,54,39,-9,108,13,3,-19,11,-22,-6,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0075391847640275955, 0.0059510213322937489, 0.011243732646107674, 0.0017657522112131119, 0.0067101609893143177, 0.0068292631767690182, 0.013291414827108383, 0.0035951344761997461, 0.0064164442010223866, 0.018629143014550209, 0.0066909515298902988, 0.012954303063452244, 0.0034935879521071911, 0.02213621698319912, 0.006937278900295496, 0.0062691196799278259, 0.0040365210734307766, 0.011142503470182419, 0.0025337687693536282, 0.0099681485444307327, 0.0021037389524281025, 0.0094051212072372437, 0.0070074917748570442, 0.01570843905210495, 0.0094572445377707481, 0.011248650029301643, 0.0060552521608769894, 0.0080888401716947556, 0.005229477770626545, 0.0035915265325456858, 0.0058139311149716377, 0.0073951622471213341, 0.0060665919445455074, 0.0061317151412367821, 0.0082037504762411118, 0.0068803201429545879, 0.018782336264848709, 0.0055201458744704723, 0.0020409615244716406, 0.00789629016071558, 0.0087496554479002953, 0.013218403793871403, 0.015410221181809902, 0.005640056449919939, 0.0073702284134924412, 0.0021259225904941559, 0.012457531876862049, 0.010015885345637798, 0.004514982458204031, 0.0081038037315011024, 0.0081946542486548424, 0.0066779847256839275, 0.012168549001216888, 0.015451839193701744, 0.014244331046938896, 0.025275746360421181, 0.011096560396254063, 0.0083484193310141563, 0.0047151725739240646, 0.0032827423419803381, 0.013866009190678596, 0.0068066176027059555, 0.011154516600072384, 0.0054147499613463879, 0.009352915920317173, 0.0078623499721288681, 0.003453840734437108, 0.0033796699717640877, 0.016111612319946289, 0.010543405078351498, 0.01003170944750309, 0.0046154428273439407, 0.003953536506742239, 0.0057787098921835423, 0.0069023589603602886, 0.012042469345033169, 0.021001262590289116, 0.0028131064027547836, 0.013176552020013332, 0.010542613454163074, 0.0068641523830592632, 0.015633709728717804, 0.0045721279457211494, 0.0066621620208024979, 0.0055320607498288155, 0.0037659758236259222, 0.006479993462562561, 0.0082170525565743446, 0.0087350709363818169, 0.0054414789192378521, 0.0086090099066495895, 0.0044843177311122417, 0.0070072701200842857, 0.025289954617619514, 0.30401483178138733, 0.0035670821089297533, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 14295, 2168, 8581, -709, 4600, 6262, 20195, 6939, -1415, 17579, 6579, 1960, 7413, 37649, -449, -2381, 9046, 13196, 2353, -177, -851, 13337, 5745, 3388, 8770, 6243, 4610, 5550, 30, 14, 5608, 10421, 17099, 2500, 8380, -551, 20040, 9974, 658, 5262, 1037, 12121, 13043, 5962, 3963, 10394, 17962, 4513, 6511, 4037, 292, -939, 16635, 6134, 9498, 20566, -294, 10211, 4272, 4457, 13252, 8823, 3602, 7704, 6824, 4464, 7749, -824, 22865, 10224, 9043, -1337, -1603, 2165, 1729, 4460, 26841, 12248, 14144, -2569, 6722, -6937, -2055, 790, 7310, 5652, 7517, 4111, 11406, 5630, 10098, 4216, 13111, 24607, -9376, 16417, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00018236257892567664, 0.00016058447363320738, 0.00015911531227175146, 0.00076684006489813328, 0.00035259837750345469, 0.00015009297931101173, 0.00015466372133232653, 0.00050547695718705654, 0.00032496440690010786, 0.00010355858103139326, 0.00021392026974353939, 0.00042162497993558645, 0.00037117715692147613, 0.00012842226715292782, 0.00024717726046219468, 0.00028659071540459991, 0.00024408129684161395, 0.00017581101565156132, 0.00018435496895108372, 0.00062778010033071041, 0.00032209191704168916, 0.00018664682283997536, 0.00026587161119095981, 0.00023447279818356037, 0.00020342004427220672, 0.00033160709426738322, 0.00030678207986056805, 0.00016346995835192502, 0.00054537091637030244, 0.00034195010084658861, 0.00025446282234042883, 0.00018030087812803686, 0.00011578101839404553, 0.00043002387974411249, 0.00019784178584814072, 0.00051948532927781343, 0.00011320241173962131, 0.00026464153779670596, 0.0006708555156365037, 0.00017987446335610002, 0.00048720842460170388, 0.0001554140035295859, 0.00016353531100321561, 0.00012607441749423742, 0.00028196503990329802, 0.00031325739109888673, 0.0001576584909344092, 0.00032201618887484074, 0.00024749967269599438, 0.00021860918786842376, 0.00043391264625824988, 0.00069121824344620109, 0.00016014171706046909, 0.00025729506160132587, 0.00024365425633732229, 9.0788860688917339e-05, 0.00039351385203190148, 0.0001713110541459173, 0.00018658110639080405, 0.00036673204158432782, 0.00012719945516437292, 0.00015762225666549057, 0.00029150181217119098, 0.00035860168281942606, 0.00015579584578517824, 0.00024828276946209371, 0.0002531239006202668, 0.00040522983181290329, 0.00011700869799824432, 0.00011337301839375868, 0.00022038085444364697, 0.0003639597853180021, 0.00022752645600121468, 0.00060887134168297052, 0.00024578001466579735, 0.00028576556360349059, 8.853898907545954e-05, 0.00036723585799336433, 0.00011781594366766512, 0.00046911393292248249, 0.00016351582598872483, 0.00029789554537273943, 0.00018289008585270494, 0.0003418083069846034, 0.00021991689573042095, 0.00027428119210526347, 0.00021426542662084103, 0.00033721100771799684, 0.00014784741506446153, 0.00028426610515452921, 0.00013882869097869843, 0.00040385953616350889, 0.00015924670151434839, 0.0001124651389545761, 0.00031161328661255538, 0.00020076993678230792, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 49,-17,127,108,61,-45,38,-30,99,-8,-70,-73,20,73,-37,-88, 
  /* [1][0][][] */ 44,76,-3,13,98,1,22,36,67,76,-36,127,-6,-20,91,-105, 
  /* [2][0][][] */ 22,-71,-4,-2,-60,38,-49,93,-74,-102,13,76,-8,-127,97,-100, 
  /* [3][0][][] */ 127,118,0,40,-127,-7,-71,-21,0,6,103,-64,-45,93,-44,-39, 
  /* [4][0][][] */ 4,-14,28,13,-15,37,-18,49,-72,-45,-6,6,-4,-127,36,7, 
  /* [5][0][][] */ 127,-47,-28,-3,-15,-121,-13,19,-13,13,-125,-11,23,-10,-6,30, 
  /* [6][0][][] */ -127,-95,-4,115,-53,-3,-59,38,-115,-71,-97,-36,28,69,-13,95, 
  /* [7][0][][] */ -21,10,-80,59,48,-127,-31,51,18,-39,20,-2,-1,27,-52,16, 
  /* [8][0][][] */ 30,-53,-8,-16,11,20,-59,-59,-11,8,-66,6,-127,3,-4,25, 
  /* [9][0][][] */ 15,-57,67,116,-4,29,-15,-82,127,-102,-1,-26,1,55,-71,24, 
  /* [10][0][][] */ -99,-58,3,-41,106,50,42,75,107,-87,-80,38,93,-92,-127,78, 
  /* [11][0][][] */ 40,-12,-127,19,52,19,-17,38,-16,-23,-14,0,-9,16,-38,0, 
  /* [12][0][][] */ 115,-59,8,5,-18,-75,-57,-24,44,3,-127,-29,-57,-12,-9,65, 
  /* [13][0][][] */ 35,-75,18,-49,77,1,-93,-127,38,-57,8,8,17,-16,29,-2, 
  /* [14][0][][] */ -47,27,-88,-39,70,-127,69,-59,42,48,-10,-95,16,95,-23,28, 
  /* [15][0][][] */ 29,-7,65,48,53,-43,-39,-11,22,-63,-66,-6,-127,-51,-17,51, 
  /* [16][0][][] */ -127,59,7,7,-7,71,39,60,-24,28,104,12,-1,4,9,-37, 
  /* [17][0][][] */ -17,-6,-47,-37,-38,11,38,65,-28,127,-15,3,-12,71,66,5, 
  /* [18][0][][] */ 14,127,-53,1,5,13,64,-61,24,120,-58,115,7,-45,36,-93, 
  /* [19][0][][] */ 7,-20,31,19,9,41,-7,13,13,4,-44,-5,-127,1,-13,27, 
  /* [20][0][][] */ 89,-54,-8,-76,-31,22,15,-86,-46,30,-127,-30,33,0,63,9, 
  /* [21][0][][] */ 60,-10,127,54,-30,47,21,-7,-8,31,-24,-16,-12,72,10,-11, 
  /* [22][0][][] */ 35,14,22,23,-15,0,30,127,19,13,6,41,6,34,36,14, 
  /* [23][0][][] */ -22,20,-79,9,13,-127,7,36,0,-17,-6,-13,-61,4,2,27, 
  /* [24][0][][] */ 48,-65,5,-59,49,-8,-16,-2,29,36,50,88,-35,91,127,40, 
  /* [25][0][][] */ -127,-87,-37,-4,22,12,1,-42,-49,0,-69,15,11,28,18,41, 
  /* [26][0][][] */ 18,5,57,-10,-11,6,-36,59,-82,-65,2,5,-2,-127,42,-26, 
  /* [27][0][][] */ -98,45,-48,25,25,-25,6,22,35,-24,127,12,-19,0,-2,-32, 
  /* [28][0][][] */ -14,-9,19,39,-1,-5,21,89,30,14,-26,-2,-127,-7,-15,41, 
  /* [29][0][][] */ -6,70,47,-33,43,-22,17,-20,-127,28,-33,10,7,40,-96,17, 
  /* [30][0][][] */ -12,-2,-127,-34,30,-52,-5,14,-7,-8,4,-26,-39,-27,11,11, 
  /* [31][0][][] */ 127,-28,-126,19,39,7,-52,60,-19,-2,-72,-38,15,-17,-83,39, 
  /* [32][0][][] */ -127,35,37,44,24,88,28,37,19,-11,120,14,-21,29,-32,-11, 
  /* [33][0][][] */ 2,-16,127,-19,-55,35,8,-26,0,0,-3,22,-6,28,38,11, 
  /* [34][0][][] */ -27,-37,-47,-123,31,6,16,-31,-45,-65,-39,-127,-3,2,45,34, 
  /* [35][0][][] */ 3,-35,33,40,48,-27,20,-21,-127,40,-11,18,-28,126,-43,-39, 
  /* [36][0][][] */ -113,50,-33,5,-5,58,29,80,1,24,127,-11,17,22,21,-24, 
  /* [37][0][][] */ -45,16,127,-38,-84,-61,28,-42,22,27,-12,3,-5,-75,70,14, 
  /* [38][0][][] */ 9,-8,-22,33,32,-63,-51,6,-16,-13,62,-12,127,10,-20,5, 
  /* [39][0][][] */ -16,-22,7,-54,-39,-81,53,127,-42,-28,7,-52,5,61,66,53, 
  /* [40][0][][] */ 79,-10,-8,-5,-15,90,-8,17,6,3,10,-4,127,12,-23,-23, 
  /* [41][0][][] */ -8,-8,-30,-127,22,-6,-28,-81,-13,-46,13,-49,-5,-23,-23,30, 
  /* [42][0][][] */ 35,40,18,107,-93,3,-105,7,-63,-52,58,-66,-37,127,-54,-10, 
  /* [43][0][][] */ 11,113,-34,127,18,31,52,-83,-51,89,-2,19,-1,-53,50,32, 
  /* [44][0][][] */ -19,-31,-127,19,41,73,-32,56,-16,-18,25,-17,8,-27,-51,2, 
  /* [45][0][][] */ 3,21,-12,-127,-29,-1,60,-4,-7,33,-37,9,10,-99,39,-34, 
  /* [46][0][][] */ 4,21,62,-20,12,17,-32,57,11,-50,-9,7,3,127,39,-20, 
  /* [47][0][][] */ 9,-19,15,-34,-30,20,-69,53,-4,-32,22,32,7,-127,43,8, 
  /* [48][0][][] */ 8,-13,16,-127,-9,-19,1,12,15,-31,13,-15,5,51,-3,53, 
  /* [49][0][][] */ 27,-38,4,122,94,17,4,53,-67,15,41,53,-18,35,127,-6, 
  /* [50][0][][] */ -8,-11,77,-15,-5,127,-19,-41,39,-23,87,32,88,12,1,-54, 
  /* [51][0][][] */ 31,48,12,14,13,2,-36,29,40,8,-10,127,15,27,39,-63, 
  /* [52][0][][] */ -31,61,116,-1,11,-28,25,-55,-39,13,21,28,-15,73,-127,-15, 
  /* [53][0][][] */ -9,-25,-38,-127,-39,11,14,-35,-8,33,15,-15,16,-14,48,7, 
  /* [54][0][][] */ -2,18,-35,-56,20,14,-12,5,59,-27,10,-31,-18,127,20,35, 
  /* [55][0][][] */ -11,-47,-32,-26,19,-54,-23,-127,0,-124,5,-7,-36,-71,-73,2, 
  /* [56][0][][] */ 39,37,27,63,7,-26,24,127,20,-19,7,-33,79,-22,-50,36, 
  /* [57][0][][] */ 67,-33,127,-41,-76,-61,7,-35,5,1,-109,17,47,-43,45,26, 
  /* [58][0][][] */ 107,100,24,116,-127,-24,-15,35,-24,14,95,-41,-78,-72,-12,-81, 
  /* [59][0][][] */ 108,-53,-9,1,-19,-6,0,21,-15,10,-127,-3,20,8,-14,41, 
  /* [60][0][][] */ -127,25,2,3,4,19,41,45,13,2,85,5,-33,10,16,-16, 
  /* [61][0][][] */ -117,65,21,33,46,13,-66,-65,127,-91,94,-9,44,-51,-102,-81, 
  /* [62][0][][] */ -27,-39,-127,54,64,103,-1,91,18,-55,38,-12,-80,-10,-116,-8, 
  /* [63][0][][] */ -50,15,127,-31,-57,-51,31,-26,10,13,6,14,-12,-46,66,17, 
  /* [64][0][][] */ 35,60,-19,13,52,-10,93,-127,-26,96,13,-28,-12,-100,-6,57, 
  /* [65][0][][] */ -1,10,16,-21,84,23,-12,-127,-15,-75,-25,-51,-12,-42,44,14, 
  /* [66][0][][] */ -127,-6,-10,0,-46,29,9,-40,-82,-38,-89,44,50,28,48,79, 
  /* [67][0][][] */ -6,-53,7,127,11,8,-43,41,61,18,16,-13,-7,-34,-100,-28, 
  /* [68][0][][] */ 12,7,-6,127,-47,-9,-16,-25,-39,28,5,-11,-17,-62,-20,-50, 
  /* [69][0][][] */ 102,115,7,122,35,-9,51,-127,30,103,35,38,12,-33,27,-27, 
  /* [70][0][][] */ 12,-27,3,-75,127,-26,37,19,83,-22,66,-30,2,92,72,84, 
  /* [71][0][][] */ 25,45,-2,78,32,-127,-23,88,29,-72,4,18,9,-61,-47,27, 
  /* [72][0][][] */ -127,-69,-22,59,8,29,-20,25,-55,-18,-108,49,54,18,12,103, 
  /* [73][0][][] */ -10,-23,-8,48,7,-4,5,-6,51,12,-7,-2,19,127,-51,-28, 
  /* [74][0][][] */ 65,-37,19,-36,-38,-15,36,-20,-47,-7,-102,17,-127,-19,28,45, 
  /* [75][0][][] */ -16,-22,-31,127,-31,7,1,-26,-69,27,-14,-31,-2,-57,-12,-35, 
  /* [76][0][][] */ 9,-18,-1,48,41,2,-23,-116,17,-127,15,28,-23,-14,17,-36, 
  /* [77][0][][] */ 127,-29,39,40,-43,-11,-37,-2,35,-10,-23,40,42,19,-58,32, 
  /* [78][0][][] */ -16,-4,44,3,9,-22,-64,33,53,-23,-46,-28,25,127,33,-32, 
  /* [79][0][][] */ -6,20,44,15,41,57,-50,-53,13,-44,65,-20,127,-20,-28,-37, 
  /* [80][0][][] */ -104,-71,-90,127,-3,36,37,-2,-64,43,-81,27,58,-73,1,37, 
  /* [81][0][][] */ 78,-2,-62,47,123,109,-41,-37,3,-127,-22,-78,-39,-5,-102,16, 
  /* [82][0][][] */ 112,117,-2,36,-127,-20,-57,-11,-76,-2,101,-64,-65,93,3,-37, 
  /* [83][0][][] */ 127,38,18,-27,6,-8,-9,32,33,16,77,-35,-56,-28,-24,-85, 
  /* [84][0][][] */ 5,-45,-70,-27,29,17,0,-127,-31,-43,16,8,-21,-13,9,-15, 
  /* [85][0][][] */ -18,-10,-37,-43,-14,-2,66,73,-14,127,-14,-43,20,50,65,-25, 
  /* [86][0][][] */ 103,-27,18,-7,4,-20,-6,-16,6,-9,-127,3,5,29,-12,24, 
  /* [87][0][][] */ -4,51,16,-35,-18,67,-27,49,-7,-16,32,-4,-8,-127,23,-11, 
  /* [88][0][][] */ 20,-37,-102,-39,93,-5,-43,-127,23,-54,4,-42,-32,15,26,-27, 
  /* [89][0][][] */ 34,-16,41,-122,31,11,-46,127,68,-74,27,22,-20,53,38,45, 
  /* [90][0][][] */ -19,4,-45,63,88,-1,119,-90,72,127,-52,56,28,6,-23,-9, 
  /* [91][0][][] */ 39,-20,-52,-6,-8,-127,-12,-2,-2,-2,-50,-1,35,-10,-3,38, 
  /* [92][0][][] */ 24,22,127,52,32,22,1,47,-31,19,-50,15,11,95,-6,-19, 
  /* [93][0][][] */ 127,-30,-45,-18,-31,-55,14,36,-27,44,-122,-12,1,15,2,42, 
  /* [94][0][][] */ 15,-27,50,93,126,-38,-15,51,9,-21,5,60,-13,127,-33,-84, 
  /* [95][0][][] */ -127,47,41,49,25,47,14,2,14,7,116,3,-27,30,1,-36, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00064781412947922945, 0.00057045085122808814, 0.00056523189414292574, 0.0027240775525569916, 0.0012525498168542981, 0.00053318147547543049, 0.00054941832786425948, 0.0017956267111003399, 0.0011543844593688846, 0.00036787541466765106, 0.00075991783523932099, 0.0014977558748796582, 0.001318547991104424, 0.0004561997193377465, 0.00087805796647444367, 0.0010180680546909571, 0.00086706009460613132, 0.00062454072758555412, 0.00065489177359268069, 0.0022300891578197479, 0.0011441804235801101, 0.00066303322091698647, 0.00094446673756465316, 0.00083292741328477859, 0.00072261743480339646, 0.0011779816122725606, 0.0010897946776822209, 0.00058070110389962792, 0.0019373436225578189, 0.0012147234519943595, 0.00090393878053873777, 0.00064049026696011424, 0.00041129370220005512, 0.0015275916084647179, 0.0007028015679679811, 0.0018453891389071941, 0.00040213359170593321, 0.00094009708845987916, 0.0023831077851355076, 0.00063897547079250216, 0.0017307306407019496, 0.00055208359844982624, 0.00058093323605135083, 0.00044785934733226895, 0.0010016360320150852, 0.001112797181122005, 0.00056005676742643118, 0.001143911387771368, 0.00087920331861823797, 0.000776574423070997, 0.0015414057997986674, 0.0024554431438446045, 0.00056887802202254534, 0.0009139999165199697, 0.00086554308654740453, 0.00032251302036456764, 0.0013978955103084445, 0.00060855533229187131, 0.00066279974998906255, 0.0013027574168518186, 0.00045185588533058763, 0.0005599280702881515, 0.0010355139384046197, 0.0012738755904138088, 0.00055344001157209277, 0.00088198517914861441, 0.00089918251615017653, 0.0014395146863535047, 0.0004156548238825053, 0.00040273964987136424, 0.00078286800999194384, 0.0012929093791171908, 0.0008082516142167151, 0.0021629189141094685, 0.00087309448281303048, 0.0010151368333026767, 0.00031452070106752217, 0.001304547069594264, 0.00041852245340123773, 0.0016664528520777822, 0.00058086402714252472, 0.0010582266841083765, 0.00064968800870701671, 0.0012142197228968143, 0.00078121986007317901, 0.00097434042254462838, 0.00076114392140880227, 0.0011978886323049664, 0.00052520446479320526, 0.0010098102502524853, 0.00049316691001877189, 0.0014346468960866332, 0.00056569866137579083, 0.0003995145671069622, 0.0011069567408412695, 0.00071320333518087864, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -40318, 1964, -187, -7432, -939, -7816, -12451, -42057, 584, 27149, 30005, -13180, -1715, -22963, 40980, -45952, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00066046055871993303, 0.00082192616537213326, 0.001020300667732954, 0.0010543360840529203, 0.00082323746755719185, 0.0010294819949194789, 0.0012624668888747692, 0.00053691555513069034, 0.00060741795459762216, 0.00066422158852219582, 0.00091848900774493814, 0.00057230808306485415, 0.001214219257235527, 0.0011328788241371512, 0.00058103568153455853, 0.00056029867846518755, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -20,2,-24,10,21,1,6,110,-50,18,46,-1,14,-15,-17,11,17,-11,-12,-8,61,-13,17,127,-14,92,-8,-12,24,-13,25,-30,-15,50,17,-53,14,44,22,-16,-109,-23,22,40,32,28,-122,-51, 
  /* [1][0][][] */ -39,-9,20,15,-36,13,3,58,-55,-31,6,-39,-24,-13,-3,-6,-24,119,-14,14,9,2,-30,-14,28,-39,16,26,-24,-82,-40,17,-23,-3,28,-5,-7,-44,4,14,-17,-28,127,9,11,-2,20,-15, 
  /* [2][0][][] */ -25,-9,-11,-35,0,-65,7,-19,-1,15,16,26,18,14,-14,6,-2,-20,-21,-12,-3,1,1,-127,-15,73,-15,4,-4,-23,-1,-3,-5,58,12,0,27,10,27,1,-38,4,-21,-5,-1,-12,16,7, 
  /* [3][0][][] */ -6,35,4,-29,-3,-2,3,-5,-17,-6,-1,36,-127,5,-4,-1,2,3,-16,-4,-32,7,5,18,-7,-12,2,21,-11,16,5,14,3,1,19,20,-8,24,39,6,12,3,26,-27,6,-6,5,20, 
  /* [4][0][][] */ 32,-28,12,10,21,29,23,-20,-30,2,-15,-22,-1,5,-1,16,26,-8,-72,5,-5,10,13,70,-1,-30,10,49,9,-71,20,5,15,-31,32,-127,15,37,1,16,-13,17,6,-22,-9,-23,9,10, 
  /* [5][0][][] */ 27,0,-22,57,-1,-4,9,28,-1,-1,43,10,4,54,-1,-1,-23,24,27,1,8,1,0,-28,-3,-49,3,-18,-5,-10,6,3,69,-127,0,28,-15,-11,17,2,-92,60,17,-6,-3,-5,-102,-5, 
  /* [6][0][][] */ 24,0,5,5,-12,-3,4,-11,-4,6,-3,6,-19,7,3,5,2,-10,127,11,5,7,15,-33,1,5,26,-10,-10,-2,-3,5,-2,-10,29,-38,1,-45,72,11,1,-8,-5,5,-12,-2,5,-11, 
  /* [7][0][][] */ -45,-15,-7,37,-6,74,-6,40,4,24,-3,127,74,-4,-4,-1,-8,-28,-4,-13,-24,-3,-22,68,2,-38,-52,-32,-14,-15,-15,-7,2,2,-18,7,12,-60,91,-1,22,31,-57,-55,13,-10,7,-1, 
  /* [8][0][][] */ -54,-46,1,9,-5,4,3,35,0,-69,5,46,49,6,7,6,-9,60,-28,6,-53,21,-11,-10,-2,3,9,45,-11,117,-11,19,-4,8,-19,-127,-115,64,37,28,25,-3,109,-26,5,28,20,31, 
  /* [9][0][][] */ -22,3,-3,28,16,-37,-4,-5,60,-44,6,55,-54,3,18,4,-6,18,-36,-24,49,8,-9,-17,3,8,46,-29,12,7,12,2,-6,12,79,-102,-7,-127,-99,10,-31,24,61,11,8,11,-17,-41, 
  /* [10][0][][] */ -25,-4,-34,-127,41,89,10,-8,-5,36,24,11,44,-47,-34,17,36,-47,52,-33,30,-26,34,53,-52,-105,10,-30,44,34,42,-46,-30,-76,25,-9,22,-46,10,-36,-33,-62,-14,8,12,11,14,-35, 
  /* [11][0][][] */ -5,54,-6,68,34,-62,-81,-14,6,64,-13,7,-12,57,-3,-81,17,42,3,-13,-49,-107,9,4,18,-36,14,-16,51,-37,21,-88,45,-15,-40,-87,88,18,11,-127,-4,69,94,-76,-12,-54,32,27, 
  /* [12][0][][] */ 127,-7,-15,17,3,18,5,98,22,-10,-56,-23,4,15,-10,-1,-7,11,-2,-3,3,0,3,17,-1,14,-6,5,-2,10,-1,5,4,-64,-12,13,-18,-17,-31,2,-13,-77,4,-123,-56,-13,82,-5, 
  /* [13][0][][] */ 9,2,2,7,7,-11,2,1,1,8,6,23,-3,4,6,0,8,2,13,5,13,-13,9,-2,1,2,16,127,11,-7,7,-2,4,2,-39,22,11,-7,5,-13,-12,-3,-1,6,-4,-4,-8,-12, 
  /* [14][0][][] */ 62,-24,39,-75,47,30,37,-99,-60,-50,-1,119,-70,1,63,13,46,22,-58,62,16,14,68,-21,23,58,-30,-112,26,-35,56,46,-1,62,-127,-52,-43,44,88,9,-41,14,51,0,5,0,13,-26, 
  /* [15][0][][] */ -6,-51,-81,-40,61,30,74,-53,-12,20,-21,-40,80,16,-106,62,66,51,80,-79,-111,-21,57,-18,-100,39,35,60,59,56,45,-55,25,61,102,127,-16,-109,-7,-35,102,65,117,-53,-2,-39,-13,73, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.028069572523236275, 0.034931860864162445, 0.043362777680158615, 0.044809281826019287, 0.034987591207027435, 0.043752983212471008, 0.05365484207868576, 0.022818909958004951, 0.025815263390541077, 0.028229417279362679, 0.039035782217979431, 0.024323092773556709, 0.051604315638542175, 0.048147346824407578, 0.024694016203284264, 0.023812692612409592, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 2312, 38910, -960, 57118, 4033, 124983, -1690, 47879, 4052, 33361, 28700, 8557, -1390, 33755, -1453, -1970, -7, 310, 1371, -1825, 551, -2538, -1199, -23636, -4872, 45114, 130770, 103586, 2789, 5105, -3730, -358, 26220, -542, 62757, -8005, 52990, 2624, 51414, 2625, -825, 62287, 1201, 1961, 49864, 150, 2236, 53188, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 7.6619049650616944e-05, 3.4881017199950293e-05, 0.00016818985750433058, 4.1885388782247901e-05, 0.00012517785944510251, 7.4663905252236873e-05, 0.00015913197421468794, 0.00012254083412699401, 7.5712443504016846e-05, 3.7825309846084565e-05, 5.5060623708413914e-05, 6.8434761487878859e-05, 4.1832190618151799e-05, 3.5698627470992506e-05, 0.00022883067140355706, 0.00018968147924169898, 0.00017902487888932228, 6.9586378231178969e-05, 0.00011318806355120614, 0.00016121637600008398, 7.3131886892952025e-05, 0.00016150891315191984, 9.4908369646873325e-05, 0.00015253697347361594, 0.00014046234718989581, 9.938608855009079e-05, 2.8576130716828629e-05, 6.8769142671953887e-05, 0.00011362270743120462, 0.00011168423952767625, 0.000115107701276429, 0.00017010954616125673, 5.0639482651604339e-05, 0.00014670347445644438, 2.3539512767456472e-05, 6.6018190409522504e-05, 0.00010884476796491072, 8.6408945207949728e-05, 0.0001128323856391944, 0.00013799506996292621, 0.00013050886627752334, 9.3815731815993786e-05, 6.9021814852021635e-05, 8.9431508968118578e-05, 2.4428363758488558e-05, 0.00015551618707831949, 9.7096592071466148e-05, 2.1304515030351467e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 69,-92,98,70,53,-34,105,-64,60,-88,-81,47,52,-41,-72,-90,100,79,50,77,67,-74,-82,50,-31,-40,-64,-64,-67,61,-63,-114,-13,41,69,64,-65,53,-50,-23,50,-74,57,62,-95,10,76,-34, 82,-97,127,84,-77,-69,-57,-84,96,-103,-64,74,80,-110,-96,91,-39,96,83,127,84,-117,53,71,-51,-77,-70,-80,55,79,-31,-127,-86,79,81,83,-82,82,-83,-15,75,-94,82,89,-74,-127,94,-103, 34,-45,71,37,18,-41,-48,-39,41,-31,5,34,29,-79,-56,-2,-54,38,34,70,33,-56,32,26,-27,-46,-44,-23,30,31,88,-89,-84,44,35,34,-30,38,-38,-10,41,-40,34,42,-6,-9,36,-73, 
  /* [0][1][][] */ 92,-112,-42,93,55,-82,127,-89,86,-113,-72,81,83,-111,-13,-127,127,108,74,-39,85,108,-127,73,74,-75,-94,-98,-127,86,-70,-8,-87,71,106,96,-86,78,-80,89,84,-101,87,91,-90,106,94,-92, 127,-127,-66,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-22,96,-65,127,127,-51,127,127,69,127,127,-127,-127,-127,53,127,-29,17,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 62,-77,-34,65,38,-62,-48,-62,55,-42,-61,58,48,-54,-16,10,-63,51,57,-31,57,64,51,64,66,-65,-60,-45,36,54,127,16,-63,69,48,50,-49,59,-59,55,60,-57,54,62,-62,-67,59,-57, 
  /* [0][2][][] */ 44,-50,-47,48,26,-52,63,-42,41,-74,-4,40,56,-72,82,-79,72,51,34,-31,26,-11,-76,30,-23,-44,-46,-50,-75,31,-42,90,-74,37,49,43,-26,37,-43,-86,47,-50,42,45,-23,16,40,-74, 72,-74,-49,79,-57,-64,-72,-67,50,-79,-66,62,75,-48,127,31,-47,58,61,-46,55,-19,41,67,-48,-66,-75,-62,31,61,-24,119,-55,65,57,58,-49,61,-68,-104,68,-67,61,62,-86,49,63,-52, 41,-40,-27,46,28,-20,-17,-33,14,-27,-53,29,32,5,67,23,-35,22,28,-33,28,-1,39,42,-24,-29,-46,-24,34,32,61,68,1,34,15,22,-21,29,-30,-55,29,-32,26,29,-63,9,31,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0032563095446676016, 0.0014824431855231524, 0.0071480688638985157, 0.001780129037797451, 0.0053200586698949337, 0.003173216013237834, 0.0067631090059876442, 0.0052079851739108562, 0.0032177786342799664, 0.0016075755702331662, 0.0023400764912366867, 0.0029084773268550634, 0.0017778680194169283, 0.0015171916456893086, 0.0097253033891320229, 0.0080614630132913589, 0.0076085571199655533, 0.0029574211221188307, 0.0048104925081133842, 0.0068516959436237812, 0.003108105156570673, 0.0068641286343336105, 0.0040336055681109428, 0.0064828209578990936, 0.0059696496464312077, 0.0042239087633788586, 0.0012144854990765452, 0.002922688378021121, 0.004828964825719595, 0.0047465800307691097, 0.0048920772969722748, 0.0072296555154025555, 0.0021521779708564281, 0.0062348977662622929, 0.0010004292707890272, 0.0028057731688022614, 0.0046259025111794472, 0.0036723800003528595, 0.0047953762114048004, 0.0058647901751101017, 0.0055466266348958015, 0.0039871684275567532, 0.0029334272257983685, 0.0038008391857147217, 0.0010382054606452584, 0.0066094375215470791, 0.004126605112105608, 0.00090544187696650624, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 432, 676, 1620, 377, 7055, 12471, 1913, -38, -589, -524, 866, 823, 2535, 896, 19871, 2308, 1355, -916, -143, 2557, -1310, 8352, 7614, 8313, 4187, 254, 2974, 2916, 6747, -461, 7343, 4204, 428, -149, 4188, 2347, -1402, 259, -558, 3924, 827, -529, -788, 63, 769, 1871, 478, 842, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00051292817806825042, 0.0010288240155205131, 0.00035825121449306607, 0.00036193692358210683, 0.00031084334477782249, 0.00032291997922584414, 0.00057815591571852565, 0.00030664654332213104, 0.00052591756684705615, 0.00081982702249661088, 0.0011387182166799903, 0.00034304533619433641, 0.00049870909424498677, 0.00085652002599090338, 0.00018070677469950169, 0.00055198388872668147, 0.00037539651384577155, 0.00041099466034211218, 0.0003136834129691124, 0.00037012365646660328, 0.00044581317342817783, 0.00030718802008777857, 0.00048547194455750287, 0.00018974773411173373, 0.00038424949161708355, 0.00038514976040460169, 0.0023423747625201941, 0.0006425102474167943, 0.00025882280897349119, 0.00054008117876946926, 0.00035707090864889324, 0.00028331737848930061, 0.00087082962272688746, 0.0003426804905757308, 0.00088228663662448525, 0.00077830307418480515, 0.00099332944955676794, 0.00042674120049923658, 0.00028861695318482816, 0.00047587126027792692, 0.00019583737594075501, 0.00029584101866930723, 0.00037324149161577225, 0.0003453883109614253, 0.0025021424517035484, 0.00074414856499060988, 0.00045111763756722212, 0.0014073289930820465, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,3,-1,71,-31,36,27,-27, 
  /* [1][0][][] */ 25,68,38,18,18,-35,101,127, 
  /* [2][0][][] */ -37,3,6,-6,-127,-19,12,-3, 
  /* [3][0][][] */ 110,4,-8,-127,-124,11,43,-23, 
  /* [4][0][][] */ -127,43,-19,1,73,-14,51,22, 
  /* [5][0][][] */ -103,-22,18,-12,-127,4,16,89, 
  /* [6][0][][] */ -9,-127,16,-23,8,1,0,37, 
  /* [7][0][][] */ -68,-6,5,95,127,-32,-30,9, 
  /* [8][0][][] */ 68,1,-3,-127,3,-25,-38,-29, 
  /* [9][0][][] */ -11,-127,-5,-12,6,96,-54,92, 
  /* [10][0][][] */ -104,-11,-4,21,-127,76,67,-11, 
  /* [11][0][][] */ 125,6,36,16,-66,-48,-37,-127, 
  /* [12][0][][] */ 2,15,43,-4,9,-77,127,61, 
  /* [13][0][][] */ 62,-32,0,-12,123,127,108,-41, 
  /* [14][0][][] */ 127,71,-6,23,-99,-11,-31,-23, 
  /* [15][0][][] */ -13,-127,11,-13,2,0,7,40, 
  /* [16][0][][] */ -46,-15,3,-6,-127,4,13,0, 
  /* [17][0][][] */ -22,111,-109,3,8,-127,105,-97, 
  /* [18][0][][] */ 127,-24,-43,17,-61,25,11,97, 
  /* [19][0][][] */ 127,-35,-12,-6,41,-14,36,-1, 
  /* [20][0][][] */ 127,29,-12,113,2,28,-1,-59, 
  /* [21][0][][] */ 18,36,-64,5,-27,95,-127,-95, 
  /* [22][0][][] */ -127,32,32,-5,-39,-4,-48,-26, 
  /* [23][0][][] */ -39,-61,3,21,-127,66,73,-19, 
  /* [24][0][][] */ 127,-3,7,-5,-72,-7,6,-6, 
  /* [25][0][][] */ 27,-13,2,-23,127,56,48,-36, 
  /* [26][0][][] */ 6,-87,13,-38,-1,-127,82,-58, 
  /* [27][0][][] */ -19,-127,28,-12,-1,-53,30,-12, 
  /* [28][0][][] */ -104,41,-27,14,-17,-26,127,89, 
  /* [29][0][][] */ -16,42,13,2,0,45,-107,-127, 
  /* [30][0][][] */ 127,-27,8,4,-93,0,-47,-25, 
  /* [31][0][][] */ -9,-28,70,-6,23,-114,127,70, 
  /* [32][0][][] */ -80,21,7,3,-127,-96,-103,53, 
  /* [33][0][][] */ -30,10,-1,23,-127,-55,-51,22, 
  /* [34][0][][] */ 5,-127,48,-11,-2,92,-69,67, 
  /* [35][0][][] */ -26,-51,-127,-6,-1,-72,47,-53, 
  /* [36][0][][] */ 1,127,63,5,-7,14,-22,-36, 
  /* [37][0][][] */ -127,34,36,-20,57,-32,-11,-109, 
  /* [38][0][][] */ -127,-15,-43,-11,43,17,35,107, 
  /* [39][0][][] */ -13,-36,72,-4,14,-86,127,97, 
  /* [40][0][][] */ -40,-23,-15,-43,-127,120,114,-28, 
  /* [41][0][][] */ -127,45,7,-71,-94,-91,-98,50, 
  /* [42][0][][] */ -42,-124,-99,0,-11,70,-127,-89, 
  /* [43][0][][] */ -74,11,-16,-127,97,67,61,-2, 
  /* [44][0][][] */ 127,-5,10,-90,27,-37,-9,47, 
  /* [45][0][][] */ -27,-127,-5,-17,-6,-55,61,-1, 
  /* [46][0][][] */ 104,-8,-7,-24,127,-39,-26,7, 
  /* [47][0][][] */ 127,6,-1,118,-5,21,21,-46, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00078713364200666547, 0.0015788213349878788, 0.00054976815590634942, 0.00055542419431731105, 0.00047701658331789076, 0.00049554923316463828, 0.00088723137741908431, 0.00047057622577995062, 0.00080706697190180421, 0.0012580970069393516, 0.0017474637134000659, 0.0005264334031380713, 0.00076531321974471211, 0.001314405701123178, 0.00027731052250601351, 0.0008470680913887918, 0.00057607912458479404, 0.00063070765463635325, 0.00048137491103261709, 0.00056798744481056929, 0.00068413972621783614, 0.00047140716924332082, 0.00074499961920082569, 0.00029118466773070395, 0.00058966479264199734, 0.00059104635147377849, 0.0035945810377597809, 0.00098598876502364874, 0.0003971864643972367, 0.00082880229456350207, 0.00054795684991404414, 0.00043477554572746158, 0.0013363650068640709, 0.00052587350364774466, 0.0013539468636736274, 0.0011943748686462641, 0.0015243518864735961, 0.00065487209940329194, 0.00044290823279879987, 0.00073026650352403522, 0.00030052976217120886, 0.00045399420196190476, 0.00057277205632999539, 0.00053002889035269618, 0.0038397586904466152, 0.0011419617803767323, 0.00069227989297360182, 0.0021596706937998533, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -39068, 27802, -14835, -12004, 22113, -3779, 32930, 45575, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00045036416850052774, 0.00067390495678409934, 0.0015651999274268746, 0.0016796180279925466, 0.00078076432691887021, 0.00058795302174985409, 0.0006064746412448585, 0.0010171905159950256, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -63,-7,-35,14,7,-21,-1,4,-115,127,-43,119,127,9,75,-18,-4,-41,4,2,-6,-3,-14,-41,27,-108,7,63,-5,12,28,-40,0,-79,109,18,-5,-9,-8,-14,115,-10,55,-30,-35,26,-8,-24, 
  /* [1][0][][] */ -3,37,127,7,-4,-22,0,-82,33,-1,23,5,-17,9,-8,-122,14,-60,10,9,-26,35,29,-38,-17,-11,16,-1,16,-7,13,-1,-6,13,19,9,-8,-31,66,-60,6,42,-9,26,-13,9,23,-3, 
  /* [2][0][][] */ 7,-49,17,-43,34,27,-8,-28,7,0,-4,15,-11,60,5,2,-36,127,-25,-34,-16,25,-38,-8,123,0,-1,-5,-29,-5,0,-39,-10,-14,0,8,-9,-4,-13,8,18,-21,-17,-1,6,24,-28,-39, 
  /* [3][0][][] */ 1,-86,-2,4,3,-6,-11,-1,-8,-14,17,19,14,-9,46,1,-10,-21,4,23,-5,24,-20,0,6,54,-1,5,-6,7,127,2,8,7,-4,2,-22,-13,-9,12,-10,7,-6,31,-8,1,2,30, 
  /* [4][0][][] */ -100,6,-2,5,3,-41,1,3,36,-35,20,-20,-31,2,-14,-12,1,6,-1,24,11,-22,10,1,-4,44,3,107,-1,0,-7,-34,-5,-127,-29,14,3,-6,-2,-1,-49,-2,-8,18,-57,-2,7,4, 
  /* [5][0][][] */ -21,27,18,4,-51,9,0,50,21,8,11,4,-7,-42,6,37,2,-88,19,6,38,-35,14,42,8,5,-76,-42,-38,-31,17,-1,-3,-66,3,-67,70,11,-47,12,28,-49,9,4,127,-13,-40,-8, 
  /* [6][0][][] */ -27,-30,-10,-10,35,-31,-1,-32,-8,-9,32,-20,-9,38,0,-60,-5,6,2,-28,-40,45,-11,-82,-1,-8,-59,-67,25,52,-13,0,3,-62,-20,71,-74,-48,10,-55,-14,13,19,39,127,-28,39,15, 
  /* [7][0][][] */ 14,31,-78,29,-22,15,2,55,-10,-4,65,-35,12,-30,-7,-3,-15,-127,37,-44,60,43,17,-60,20,-23,18,3,-18,33,-11,5,-1,33,-4,-24,-12,-51,-43,-67,-13,-26,42,62,-32,-21,-2,0, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019140476360917091, 0.028640961274504662, 0.066520996391773224, 0.071383766829967499, 0.033182483166456223, 0.024988003075122833, 0.02577517181634903, 0.043230596929788589, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -52086, -420, 6872, -318, 5332, -5757, 1529, 22387, 836, 23892, -2627, 20541, -5995, -867, 27595, 5034, 481, 15522, 39275, 11523, -72, -168, 263, 14146, -8170, 24600, 46852, 32091, 3428, 1548, -1244, 1403, 600, 13672, -6802, 12086, -10493, 18485, -22405, 119053, 18191, 20331, 10789, -1537, 16517, 3107, 1652, 165, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00046169964480213821, 0.00036155403358861804, 0.00020374925225041807, 0.00030537246493622661, 0.00015751563478261232, 0.0001261918805539608, 0.00076662743231281638, 0.00015367059677373618, 0.00016633707855362445, 0.0002003662521019578, 8.9754677901510149e-05, 0.00020895502530038357, 0.00029615417588502169, 0.00031484005739912391, 9.1174159024376422e-05, 0.00031320087146013975, 0.00020525473519228399, 0.00026929800515063107, 6.3952778873499483e-05, 0.00022321970027405769, 0.00029256619745865464, 0.00026182676083408296, 0.000219294975977391, 0.00014644511975347996, 0.00015557855658698827, 0.00014980288688093424, 0.00067804730497300625, 0.00011063884448958561, 0.0002083046711049974, 0.00055185443488880992, 9.9132812465541065e-05, 0.00022383627947419882, 0.0013870273251086473, 0.00021872065553907305, 0.0002083073923131451, 0.00020733289420604706, 0.00038279607542790473, 0.00013581657549366355, 0.00031539832707494497, 2.1067553461762145e-05, 0.00017906430002767593, 5.0566341087687761e-05, 0.00014987583563197404, 0.00016195134958252311, 0.00015006271132733673, 0.00011656463902909309, 0.00021605849906336516, 0.00012559183232951909, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,21,109,4,80,0,28,15,8,10,7,-9,-9,-46,8,-2,8,-23,-115,-6,-22,127,-10,-3,6,-6,9,-5,4,15,98,21,28,38,-29,1,34,-1,1,17,-69,-8,-9,16,3,-7,-10, 127,10,15,-127,28,85,11,11,123,127,7,43,-51,-24,5,8,127,-56,-60,-57,-100,25,-109,15,17,70,-31,-84,23,20,9,-124,6,-61,127,9,-40,-47,-6,116,-79,-99,-29,2,-35,-8,-127,22, -32,-3,8,15,-1,63,5,18,27,8,-14,31,-14,-3,15,3,-104,29,-4,78,-31,-12,-18,-6,-4,-59,-3,28,-16,4,4,-22,8,-24,16,-20,0,47,41,-13,50,37,-15,11,-44,3,-2,-6, 
  /* [0][1][][] */ 126,6,1,-98,14,-27,35,-16,8,8,-12,53,-6,-1,18,-33,0,-50,-60,-86,11,-74,-124,-18,5,98,-15,-127,-8,32,12,-108,17,-53,-2,127,-3,58,-41,40,-62,-127,39,-89,-45,-14,-13,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-97,127,-127,127,127,35,-127,-83,127,127,-107,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-42,127,-127,127,127,127,-80,127,127,127,-122,101,106, 54,5,49,-13,5,-61,44,19,-24,14,-105,-8,0,-40,127,4,63,-66,-71,87,14,-46,11,-33,1,6,-38,68,20,39,0,3,32,-44,9,66,-5,64,67,-10,-82,8,-84,-32,26,-16,-11,6, 
  /* [0][2][][] */ -53,-6,26,-16,7,35,-37,22,8,-24,12,32,7,-6,-38,17,4,22,-14,106,6,-32,-17,-12,-3,22,-1,50,-10,2,47,-32,-18,-44,-32,-40,-1,30,9,-22,10,-5,42,-38,-37,17,-11,18, 69,126,76,21,16,-19,124,35,18,-3,43,26,-5,-1,-90,24,-59,-56,-37,124,-37,48,12,20,32,-63,-41,29,77,0,127,22,85,-27,8,-37,-25,-17,-12,120,-27,-13,-39,45,20,-32,7,-127, -42,-4,7,-3,5,-5,-61,8,-18,-11,-40,-40,20,-9,-8,11,33,24,-9,-127,23,-10,5,-9,-6,10,-11,-55,-15,7,5,8,-20,87,-37,-24,-5,36,25,-61,5,8,-37,7,-43,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.019622234627604485, 0.015366045758128166, 0.0086593432351946831, 0.012978329323232174, 0.0066944141872227192, 0.0053631546907126904, 0.032581664621829987, 0.0065310001373291016, 0.0070693260058760643, 0.0085155656561255455, 0.0038145738653838634, 0.0088805882260203362, 0.012586552649736404, 0.013380702584981918, 0.003874901682138443, 0.013311036862432957, 0.0087233260273933411, 0.011445164680480957, 0.002717992989346385, 0.009486837312579155, 0.012434063479304314, 0.011127636767923832, 0.0093200365081429482, 0.0062239174731075764, 0.006612088531255722, 0.0063666226342320442, 0.028817011043429375, 0.004702150821685791, 0.008852948434650898, 0.023453813046216965, 0.0042131445370614529, 0.0095130419358611107, 0.058948662132024765, 0.0092956274747848511, 0.0088530639186501503, 0.008811648003757, 0.016268832609057426, 0.0057722041383385658, 0.013404428027570248, 0.00089537102030590177, 0.0076102325692772865, 0.0021490694489330053, 0.0063697230070829391, 0.006882932037115097, 0.0063776653259992599, 0.0049539972096681595, 0.0091824857518076897, 0.005337652750313282, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 38236, 6050, 4646, 6529, 1540, 7686, -1555, -238, 780, 1958, 2899, 245, 1678, -801, 635, -1730, 3535, 8177, -254, 20281, 3066, 2148, 7276, -416, 3462, 4283, 22544, 7490, -72, -1997, 106, 1588, -1743, 7120, 2490, 6403, 5429, 3306, 18780, 1605, -660, 2405, 934, 3358, 3741, 1865, -1043, 2262, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00011239280865993351, 0.00037386684562079608, 0.00032747219665907323, 0.00049564905930310488, 0.0014589928323403001, 0.00065644888672977686, 0.0012414416996762156, 0.0013090206775814295, 0.00070320809027180076, 0.00068542006192728877, 0.00076998205622658134, 0.00059190200408920646, 0.00057631556410342455, 0.00057588907657191157, 0.00070868729380890727, 0.0020967503078281879, 0.00045867529115639627, 0.00052208983106538653, 0.001971998019143939, 0.00013418158050626516, 0.00039259798359125853, 0.00047063652891665697, 0.00054346630349755287, 0.0012106383219361305, 0.00035416838363744318, 0.00027469760971143842, 0.00018052868836093694, 0.00048868719022721052, 0.00099528522696346045, 0.0012969456147402525, 0.0006564966170117259, 0.0005214106640778482, 0.001148057752288878, 0.00030925922328606248, 0.00042345342808403075, 0.00029115722281858325, 0.00067210185807198286, 0.00041096779750660062, 0.0001244776212843135, 0.0028265849687159061, 0.0008963432046584785, 0.0011545820161700249, 0.0005244353087618947, 0.0004427657404448837, 0.00031649897573515773, 0.00058070896193385124, 0.0011046581203117967, 0.0011806845432147384, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 80,31,-3,1,127,17,-47,-23, 
  /* [1][0][][] */ -8,0,3,127,11,-11,12,18, 
  /* [2][0][][] */ 32,-127,-15,50,-3,-78,93,10, 
  /* [3][0][][] */ 127,-35,-9,14,-11,-32,35,10, 
  /* [4][0][][] */ 10,-43,127,-9,-12,-47,13,-100, 
  /* [5][0][][] */ 83,5,8,-2,127,9,-9,0, 
  /* [6][0][][] */ -22,92,-17,127,24,49,-77,-54, 
  /* [7][0][][] */ -10,127,-7,2,4,-12,15,0, 
  /* [8][0][][] */ 127,51,-4,6,-58,-15,-2,-38, 
  /* [9][0][][] */ -127,18,2,19,59,6,-3,5, 
  /* [10][0][][] */ -76,-7,12,127,42,31,-11,-4, 
  /* [11][0][][] */ -127,-4,17,-71,34,11,-31,-47, 
  /* [12][0][][] */ 127,34,5,14,-46,-21,4,-56, 
  /* [13][0][][] */ -11,75,-127,-4,8,102,-72,71, 
  /* [14][0][][] */ -46,-21,-9,127,21,6,2,-27, 
  /* [15][0][][] */ -3,127,4,-4,-1,-15,7,-53, 
  /* [16][0][][] */ -14,-127,-15,2,-5,-117,124,-32, 
  /* [17][0][][] */ 20,127,-1,-14,9,75,-82,-20, 
  /* [18][0][][] */ -10,43,-127,4,9,60,-38,69, 
  /* [19][0][][] */ -65,12,0,1,-127,10,12,21, 
  /* [20][0][][] */ -127,-17,1,8,61,-30,34,-5, 
  /* [21][0][][] */ -58,-8,-4,9,-127,0,14,4, 
  /* [22][0][][] */ -127,-21,-9,-9,95,-23,38,48, 
  /* [23][0][][] */ -20,-22,-5,-9,0,76,-127,-90, 
  /* [24][0][][] */ -8,39,-127,4,8,48,-20,73, 
  /* [25][0][][] */ 91,-47,5,127,-72,-11,5,-39, 
  /* [26][0][][] */ 1,-19,-2,1,-6,127,126,-31, 
  /* [27][0][][] */ 77,-5,-1,12,127,30,34,-26, 
  /* [28][0][][] */ -4,116,-72,-1,8,78,-23,127, 
  /* [29][0][][] */ -10,14,-3,-5,-2,85,-127,-83, 
  /* [30][0][][] */ 5,-3,2,-127,-6,0,-3,-15, 
  /* [31][0][][] */ -61,15,2,-1,-127,10,18,-6, 
  /* [32][0][][] */ -9,38,14,-127,-5,43,-92,-113, 
  /* [33][0][][] */ -65,-8,-4,-2,-127,42,45,3, 
  /* [34][0][][] */ -127,74,3,19,42,-25,11,11, 
  /* [35][0][][] */ -9,127,-4,2,0,-94,64,-29, 
  /* [36][0][][] */ -7,47,10,-27,3,98,-127,-27, 
  /* [37][0][][] */ 25,-77,-12,29,27,-127,121,-9, 
  /* [38][0][][] */ 19,-127,1,1,6,47,-42,69, 
  /* [39][0][][] */ -1,-127,-13,-7,1,-8,-52,-93, 
  /* [40][0][][] */ 99,46,8,0,-43,92,-127,-99, 
  /* [41][0][][] */ 3,-124,10,1,-3,72,-50,127, 
  /* [42][0][][] */ 40,-5,-10,-127,-39,-6,2,-31, 
  /* [43][0][][] */ -102,-32,8,-127,69,17,-19,-11, 
  /* [44][0][][] */ 1,-31,-3,9,-36,107,127,-21, 
  /* [45][0][][] */ -127,-33,-11,-7,28,8,29,-20, 
  /* [46][0][][] */ 9,68,127,8,0,10,18,29, 
  /* [47][0][][] */ 0,5,17,127,14,1,5,2, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00022523164807353169, 0.00074921734631061554, 0.00065624393755570054, 0.00099326507188379765, 0.0029237756971269846, 0.0013155029155313969, 0.0024878100957721472, 0.0026232362724840641, 0.0014092068886384368, 0.0013735601678490639, 0.0015430197818204761, 0.001186152920126915, 0.0011549182236194611, 0.0011540635023266077, 0.0014201869489625096, 0.0042018215171992779, 0.00091917079407721758, 0.001046251505613327, 0.0039518219418823719, 0.00026889564469456673, 0.00078675395343452692, 0.00094314076704904437, 0.0010890893172472715, 0.0024260811042040586, 0.00070974224945530295, 0.00055048533249646425, 0.00036177379661239684, 0.00097931374330073595, 0.0019945201929658651, 0.0025990381836891174, 0.0013155984925106168, 0.0010448904940858483, 0.0023006715346127748, 0.00061974575510248542, 0.0008485873113386333, 0.00058346986770629883, 0.0013468709075823426, 0.00082356651546433568, 0.00024944922188296914, 0.0056643872521817684, 0.001796243479475379, 0.0023137459065765142, 0.0010509517742320895, 0.00088728859554976225, 0.00063425395637750626, 0.0011637224815785885, 0.0022136999759823084, 0.0023660545703023672, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4590, -25164, 23588, 20672, 4716, -77, 35752, 11069, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0011302698403596878, 0.00067971640964969993, 0.0012732143513858318, 0.0010836428264155984, 0.00093222269788384438, 0.0011519667459651828, 0.00087902089580893517, 0.00068543915404006839, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -11,-3,7,-94,9,24,8,7,4,6,1,-8,95,0,2,4,0,-12,-6,-1,74,-3,0,3,30,36,11,10,5,6,4,-127,12,7,1,-3,-29,-2,-16,33,6,-25,-8,4,3,-3,5,2, 
  /* [1][0][][] */ -34,-8,-6,-6,44,28,-27,77,19,8,-28,-25,14,0,17,38,0,40,18,-47,2,22,127,17,-25,-1,55,2,22,-5,18,-10,12,-8,-5,-22,3,-57,7,3,-9,-5,-76,-6,-30,5,-47,-93, 
  /* [2][0][][] */ -55,15,-1,10,41,-9,30,23,-12,55,11,-4,3,0,4,50,0,10,-127,23,0,12,7,-16,-31,-1,35,6,12,32,20,1,6,-8,-9,-15,11,6,1,4,37,-5,-29,-1,24,-53,24,15, 
  /* [3][0][][] */ 0,3,1,9,-2,24,0,-4,66,18,-3,1,27,0,-28,-5,0,0,-6,-1,-4,-1,7,-20,-11,-4,-9,-5,-7,-4,2,-6,-45,45,-52,-4,4,-2,7,-127,-5,5,1,-52,1,-4,2,7, 
  /* [4][0][][] */ -2,-6,80,36,3,-22,-2,-1,4,-3,0,-9,-80,0,-11,4,0,9,8,-2,67,2,3,-3,-14,31,-3,46,-5,-3,-1,103,3,4,-1,-5,14,-15,-16,-18,-5,-127,2,4,-1,-4,-1,-1, 
  /* [5][0][][] */ -6,45,4,-8,2,45,24,11,-22,29,9,54,24,0,-127,-3,0,14,-39,21,-10,11,-12,42,-19,-2,26,-3,-13,24,23,-18,52,29,-40,-6,6,19,-48,17,25,-13,-11,27,22,61,21,23, 
  /* [6][0][][] */ -21,-52,2,4,37,-48,-22,10,25,-23,-11,88,-2,0,-127,37,0,-11,46,-20,-3,3,27,-33,31,2,-1,-11,45,-14,-13,-5,92,-31,25,-2,-6,-11,-67,-21,-14,-17,-5,-26,-21,-80,-19,-26, 
  /* [7][0][][] */ -114,-26,-13,7,127,17,65,27,17,3,28,-31,-26,0,85,104,0,10,5,58,-10,-1,-28,42,18,3,43,5,52,60,56,-7,-9,-15,-19,-21,3,24,24,32,74,5,-26,-13,57,0,62,77, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.048036467283964157, 0.028887946158647537, 0.054111607372760773, 0.046054817736148834, 0.039619464427232742, 0.048958584666252136, 0.037358388304710388, 0.029131162911653519, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 61235, 58825, 62334, 44048, 52, 14481, 2379, 26418, 31214, 39434, 29592, 1375, -47759, -127, 30396, 898, -204, 34230, 700, 2136, -15010, 4333, 51997, 58239, -20790, 35987, 41404, 22748, -2660, 16125, -6679, -50658, 9606, 132280, 35310, 1502, 58987, -383, 162872, -22481, 14031, -26098, 3091, 104967, -1932, 113905, 1691, -23008, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.9080287327524275e-05, 6.704803672619164e-05, 0.00013511351426132023, 0.00010673918586689979, 0.00014191500667948276, 0.00021200989431235939, 0.00015200438792817295, 6.5746200561989099e-05, 7.390917744487524e-05, 2.431069515296258e-05, 8.3364429883658886e-05, 2.2880632968735881e-05, 0.00017122834105975926, 0.005541567225009203, 8.339656051248312e-05, 0.00023026105191092938, 0.0027484172023832798, 1.8826451196218841e-05, 8.2409882452338934e-05, 0.00019497792527545244, 9.3859904154669493e-05, 0.00013600832608062774, 0.00011225831985939294, 1.956717278517317e-05, 7.8917408245615661e-05, 7.6284552051220089e-05, 3.2466399716213346e-05, 3.8437563489424065e-05, 0.00027125616907142103, 5.1318242185516283e-05, 4.5297041651792824e-05, 0.00023533021158073097, 0.00025203381665050983, 7.6176893344381824e-06, 6.8619534431491047e-05, 0.00019217061344534159, 1.5061699741636403e-05, 0.00052760279504582286, 2.8412441679392941e-05, 8.0972306022886187e-05, 6.2189123127609491e-05, 0.00015396969683934003, 9.9502001830842346e-05, 8.3493587226257659e-06, 0.00026567795430310071, 5.2487117500277236e-05, 0.00020439416402950883, 0.00014026938879396766, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -42,-22,-7,-17,7,-40,-78,-68,-27,-51,9,64,34,-71,114,-43,-113,-84,37,-7,0,-71,-111,-79,-35,-123,-63,-20,70,15,95,26,-127,-89,-7,53,18,48,-127,78,-77,-14,104,-108,-3,-35,-87,106, 76,12,-28,-29,57,-127,-127,-81,60,-76,-114,107,38,-82,-1,62,-52,-112,58,6,11,-111,-127,-69,-4,-127,-120,-40,-54,21,-56,54,29,-127,64,84,12,73,-92,127,-127,6,123,-127,1,-23,-127,93, -31,43,7,-6,-65,-109,-58,-17,87,-8,-127,37,9,-71,-101,-11,-127,-25,28,11,-15,-76,-36,-22,-11,-30,-57,-11,-10,17,-24,9,107,-86,70,32,14,36,-5,15,-79,3,7,-78,-17,5,-56,14, 
  /* [0][1][][] */ -85,-127,-44,-44,-10,54,99,-105,-26,-109,-21,112,90,-64,28,-97,-121,-94,89,-77,41,-88,-102,-127,42,-117,-78,-37,127,-60,127,84,-44,-86,-14,84,-36,-77,-106,90,42,59,104,-109,-91,-117,81,119, 127,-83,-127,-127,127,40,94,-127,102,-127,-110,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-119,127,-97,-127,-127,-119,-127,-70,127,28,-113,127,127,-69,-127,-96,90,61,127,127,-117,-113,-127,124,127, -52,31,-61,-85,-120,-23,31,-38,127,-20,-75,35,56,-70,-25,-44,-37,-29,55,-71,57,-81,-39,-24,47,-5,-45,-60,15,-88,-35,21,30,-98,116,23,-37,-62,2,-15,37,53,10,-75,-58,-37,65,35, 
  /* [0][2][][] */ -60,-108,-34,-35,0,34,-5,-35,-38,-60,-17,59,78,-127,-127,-64,-43,-19,63,74,52,-34,-13,-59,33,-53,-10,-59,75,29,77,61,108,-28,-37,-9,-95,35,-18,31,10,37,15,-56,96,-77,3,31, 88,-74,-88,-86,82,18,7,-48,49,-71,-33,56,83,-26,16,92,-24,-31,77,116,81,-54,-18,-58,95,-65,-18,-100,-50,39,-45,109,-18,-51,67,7,-127,50,-15,-1,11,32,15,-68,127,-100,-12,40, -28,29,-42,-37,-80,-19,22,-12,60,-4,-14,32,31,-43,112,-29,-93,-5,30,58,74,-29,-1,-2,43,3,-4,-64,-14,28,-20,39,-89,-43,65,4,-20,21,27,-39,8,35,-6,-15,63,-35,-5,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0042109121568500996, 0.0028495416045188904, 0.0057423240505158901, 0.0045364154502749443, 0.0060313879512250423, 0.0090104201808571815, 0.006460186094045639, 0.002794213593006134, 0.0031411400996148586, 0.001033204491250217, 0.0035429883282631636, 0.00097242690389975905, 0.0072772041894495487, 0.23551659286022186, 0.0035443536471575499, 0.0097860945388674736, 0.1168077290058136, 0.00080012413673102856, 0.0035024199169129133, 0.0082865618169307709, 0.003989045973867178, 0.0057803536765277386, 0.0047709783539175987, 0.00083160481881350279, 0.0033539899159222841, 0.0032420933712273836, 0.0013798220315948129, 0.0016335963737219572, 0.011528386734426022, 0.0021810252219438553, 0.0019251242047175765, 0.010001533664762974, 0.010711437091231346, 0.00032375179580412805, 0.0029163300059735775, 0.0081672510132193565, 0.00064012221992015839, 0.022423118352890015, 0.0012075287522748113, 0.0034413228277117014, 0.0026430375874042511, 0.0065437117591500282, 0.0042288349941372871, 0.00035484775435179472, 0.011291312985122204, 0.0022307024337351322, 0.0086867520585656166, 0.0059614488855004311, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3710, 104, 7419, 5767, 5352, 5027, 7781, -20, 16, -258, 1461, 276, 10175, -61157684, 2255, 17458, -49369656, -85, -391, 7503, 3039, -13, 25, 342, 2594, -566, 49, 567, 3204, 1229, 1808, 9236, 3128, 258, 231, -1302, 223, 2566, -93, 11380, 1557, 9144, -278, -75, 10405, 161, 6062, 3352, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00056263658916577697, 0.00053584546549245715, 0.00042577175190672278, 0.00033001642441377044, 0.00037090232945047319, 0.00041468432755209506, 0.00048907042946666479, 0.0022658172529190779, 0.00053457741159945726, 0.0028981748037040234, 0.0010142398532480001, 0.0031058217864483595, 0.0002184508484788239, 2.651893371563574e-09, 0.0011612538946792483, 0.00018900480063166469, 2.651893371563574e-09, 0.0084383478388190269, 0.00055543141206726432, 0.00051685801008716226, 0.00035635742824524641, 0.0062315291725099087, 0.00045659043826162815, 0.0019211607286706567, 0.0014664888149127364, 0.00099792750552296638, 0.0031252973712980747, 0.0021566280629485846, 0.0003536724834702909, 0.002393301110714674, 0.001636900007724762, 0.0002511967031750828, 0.00024562247563153505, 0.012480936013162136, 0.0006373310461640358, 0.00092650484293699265, 0.0068714185617864132, 0.00049001304432749748, 0.0039506764151155949, 0.00030611871625296772, 0.0018152939155697823, 0.00024122069589793682, 0.00063197844428941607, 0.011079587042331696, 0.00048497322131879628, 0.00072264927439391613, 0.00046182688674889505, 0.00026606878964230418, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 16,-127,48,-38,27,-17,-45,23, 
  /* [1][0][][] */ 65,71,-19,-88,5,-6,-79,127, 
  /* [2][0][][] */ 32,7,-49,124,53,127,47,93, 
  /* [3][0][][] */ 85,77,-86,127,-92,-4,-9,16, 
  /* [4][0][][] */ -38,-96,70,13,7,28,-40,-127, 
  /* [5][0][][] */ 13,2,-42,42,7,-34,38,127, 
  /* [6][0][][] */ 59,-22,-127,-85,114,18,48,-39, 
  /* [7][0][][] */ 127,17,18,-25,31,-5,84,-64, 
  /* [8][0][][] */ 24,-103,19,107,-4,28,-10,-127, 
  /* [9][0][][] */ 109,-126,18,-5,-15,17,-127,88, 
  /* [10][0][][] */ -127,-30,-102,15,-8,-1,-100,48, 
  /* [11][0][][] */ -19,-40,-6,-101,-127,-36,50,-17, 
  /* [12][0][][] */ 11,12,-44,76,-77,-20,64,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-31,-2,11,38,127,47,45, 
  /* [15][0][][] */ 34,6,16,-127,59,37,-52,73, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 18,25,127,19,-29,-4,27,29, 
  /* [18][0][][] */ 87,-127,20,37,-8,22,-114,3, 
  /* [19][0][][] */ -127,-5,40,82,-61,-69,-103,69, 
  /* [20][0][][] */ 34,40,-47,122,-16,-127,-5,66, 
  /* [21][0][][] */ 59,20,127,9,-14,-10,67,12, 
  /* [22][0][][] */ -72,-18,-127,-1,4,14,-100,3, 
  /* [23][0][][] */ -103,126,-17,-21,3,-7,127,-78, 
  /* [24][0][][] */ 4,-52,-54,86,-11,-59,98,127, 
  /* [25][0][][] */ 9,42,31,28,127,119,-75,-55, 
  /* [26][0][][] */ -82,-31,-127,-5,7,14,-94,-1, 
  /* [27][0][][] */ 3,-29,-34,4,-41,127,69,49, 
  /* [28][0][][] */ 1,-19,-18,41,23,127,48,54, 
  /* [29][0][][] */ 86,31,127,-2,-18,-18,79,-9, 
  /* [30][0][][] */ -78,127,-27,-27,12,-9,98,-49, 
  /* [31][0][][] */ -49,-100,-25,4,36,-76,127,112, 
  /* [32][0][][] */ 5,2,-51,116,-13,101,85,127, 
  /* [33][0][][] */ -2,66,-14,-104,10,-11,-12,127, 
  /* [34][0][][] */ -28,88,-11,-99,33,-11,11,127, 
  /* [35][0][][] */ 127,4,-18,-46,28,31,93,-38, 
  /* [36][0][][] */ -127,-1,22,57,-33,17,-123,84, 
  /* [37][0][][] */ -5,-19,-7,21,27,127,42,50, 
  /* [38][0][][] */ 16,24,10,85,127,-9,-19,38, 
  /* [39][0][][] */ 4,29,34,-127,33,-1,-47,123, 
  /* [40][0][][] */ 91,27,127,-2,-11,-15,89,-8, 
  /* [41][0][][] */ 0,-31,-34,82,51,127,73,100, 
  /* [42][0][][] */ -77,-11,127,17,-31,10,-34,60, 
  /* [43][0][][] */ -10,-53,10,101,-20,8,18,-127, 
  /* [44][0][][] */ 40,-5,-65,-127,71,-39,-2,-114, 
  /* [45][0][][] */ -85,127,1,-52,8,2,72,-54, 
  /* [46][0][][] */ -127,-20,36,24,-34,27,-79,33, 
  /* [47][0][][] */ 124,14,127,-4,29,-18,125,-19, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00083529180847108364, 0.00079551758244633675, 0.00063210190273821354, 0.00048994325334206223, 0.00055064260959625244, 0.00061564147472381592, 0.00072607526089996099, 0.0033638384193181992, 0.0007936350884847343, 0.004302638117223978, 0.001505743246525526, 0.0046109114773571491, 0.00032431271392852068, 3.937008052901092e-09, 0.0017240006709471345, 0.00028059704345650971, 3.937008052901092e-09, 0.012527593411505222, 0.00082459498662501574, 0.00076732877641916275, 0.00052904919721186161, 0.0092513449490070343, 0.00067785539431497455, 0.0028521604835987091, 0.0021771532483398914, 0.0014815259492024779, 0.004639824852347374, 0.0032017356716096401, 0.00052506313659250736, 0.0035531013272702694, 0.0024301460944116116, 0.00037292731576599181, 0.00036465178709477186, 0.018529230728745461, 0.00094618339790031314, 0.0013754916144534945, 0.010201326571404934, 0.00072747468948364258, 0.0058651850558817387, 0.00045446466538123786, 0.0026949902530759573, 0.00035811690031550825, 0.00093823688803240657, 0.016448784619569778, 0.00071999256033450365, 0.0010728470515459776, 0.00068562943488359451, 0.00039500644197687507, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -1909, -44339, -7124, -14527, -32592, -1430, -25022, -28570, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0024654325097799301, 0.0021995319984853268, 0.0026763624045997858, 0.0013892643619328737, 0.001117784297093749, 0.0025234585627913475, 0.0017627786146476865, 0.0012088275980204344, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,4,-1,125,1,0,1,0,-127,-92,-5,0,119,2,0, 
  /* [1][0][][] */ 0,-28,1,88,75,13,24,7,0,-7,127,-44,0,28,-11,0, 
  /* [2][0][][] */ 0,2,-2,-12,-60,2,10,2,0,3,-18,3,0,127,-10,0, 
  /* [3][0][][] */ 0,-12,-15,-127,84,25,71,17,0,61,-1,40,0,-1,22,0, 
  /* [4][0][][] */ 0,48,-27,37,-57,33,127,12,0,-60,14,-10,0,-6,14,0, 
  /* [5][0][][] */ 0,-17,-12,1,-24,-23,-16,17,0,10,-6,-47,0,-4,127,0, 
  /* [6][0][][] */ 0,17,-1,1,51,-20,-26,-7,0,-109,117,63,0,127,62,0, 
  /* [7][0][][] */ 0,11,-11,127,8,1,21,10,0,67,-51,75,0,-11,52,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.10478087514638901, 0.093480110168457031, 0.11374539881944656, 0.059043735265731812, 0.047505829483270645, 0.10724698752164841, 0.074918091297149658, 0.051375173032283783, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 10570, 50917, 7515, 5458, 19521, 9472, 617, -12290, 2859, 26791, 16882, -445, 25874, 5749, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 0.00024721771478652954, 7.9176657891366631e-05, 0.00046515595749951899, 0.00026353454450145364, 0.00016979803331196308, 0.00055661954684183002, 0.0063145076856017113, 2.1110763555043377e-05, 0.00052968441741541028, 0.00024773480254225433, 0.0011060995748266578, 0.00072724185883998871, 0.00025387448840774596, 0.00034605566179379821, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,90,-2,-72,67,-95,77,-95,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-43,15,-29,14,-28,1,3,-109,-49,8,-30,-14, -78,-41,-57,-14,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,33,-26,33,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,68,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.010506752878427505, 0.0033650079276412725, 0.019769128412008286, 0.011200218461453915, 0.0072164162993431091, 0.02365633100271225, 0.26836657524108887, 0.00089720747200772166, 0.022511588409543037, 0.010528728365898132, 0.047009233385324478, 0.030907778069376945, 0.010789665393531322, 0.014707365073263645, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 8302, -93875, 44021, 369976, 10834, 50423, -7241, -118892, 51872, 22167, 232495, -1073741824, 25917, 52864, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00019125781545881182, 0.00015626268577761948, 3.2910393201746047e-05, 9.407975994690787e-06, 0.00018411486234981567, 7.3446601163595915e-05, 0.00021878958796150982, 2.7044459329772508e-06, 4.2525865865172818e-05, 0.00014576911053154618, 2.4547327484469861e-05, 1.1533876076441629e-09, 0.00014862125681247562, 5.6563865655334666e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 50,-4,31, -2,-22,17, -127,-126,-70, 
  /* [1][1][][] */ 5,-4,0, -18,5,-4, 3,-32,6, 
  /* [1][2][][] */ 0,19,0, -1,10,-1, 43,-18,14, 
  /* [2][0][][] */ 33,-4,-6, 77,115,0, 40,-41,5, 
  /* [2][1][][] */ 13,15,0, 69,127,-29, 19,-7,-8, 
  /* [2][2][][] */ 52,-65,22, 75,-43,-21, 31,-57,13, 
  /* [3][0][][] */ 6,31,1, 30,91,16, -4,0,-10, 
  /* [3][1][][] */ 25,40,8, 71,127,24, -16,-22,1, 
  /* [3][2][][] */ 13,10,10, 35,33,12, 0,-3,2, 
  /* [4][0][][] */ 44,73,-15, 24,87,-15, -6,15,0, 
  /* [4][1][][] */ 47,86,40, 36,115,19, 38,54,-21, 
  /* [4][2][][] */ 67,86,34, 55,127,9, -16,27,17, 
  /* [5][0][][] */ 8,0,-124, -3,1,-104, -4,30,-26, 
  /* [5][1][][] */ 7,-41,-127, 1,-43,-114, 1,14,-22, 
  /* [5][2][][] */ 0,10,-15, 5,1,-7, 4,16,-8, 
  /* [6][0][][] */ 22,-64,31, 44,-88,36, 8,-21,7, 
  /* [6][1][][] */ 34,-96,58, 60,-127,67, 5,-30,14, 
  /* [6][2][][] */ 18,-36,11, 12,-45,23, -14,5,-3, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 127,126,90, 125,126,88, 125,124,88, 
  /* [8][1][][] */ 127,124,88, 122,121,84, 125,122,85, 
  /* [8][2][][] */ 124,121,87, 122,122,85, 124,121,86, 
  /* [9][0][][] */ -24,-5,8, -14,-6,1, 4,6,-8, 
  /* [9][1][][] */ 94,113,-8, 72,127,18, -8,20,28, 
  /* [9][2][][] */ -26,-25,16, 3,-32,0, 9,2,-21, 
  /* [10][0][][] */ -25,-84,-19, 34,94,20, -9,-13,-3, 
  /* [10][1][][] */ -60,-104,-14, 78,127,14, -17,-27,-1, 
  /* [10][2][][] */ -32,-20,2, 36,22,-11, -9,-1,7, 
  /* [11][0][][] */ -4,-16,7, 21,-27,16, 20,-81,-37, 
  /* [11][1][][] */ -34,-32,-10, -22,-48,-24, -1,-43,-37, 
  /* [11][2][][] */ 5,-25,-61, 119,127,69, -23,24,-31, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-18, -61,-111,-25, -9,-17,-6, 
  /* [13][1][][] */ 62,114,15, 58,127,24, 8,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 1,4,-4, 
  /* [14][0][][] */ 44,-7,-39, 78,-27,-51, 32,-9,-20, 
  /* [14][1][][] */ 88,-17,-74, 127,-40,-88, 59,-18,-37, 
  /* [14][2][][] */ 54,-9,-46, 74,-21,-53, 25,-7,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.048770740628242493, 0.039846982806921005, 0.0083921495825052261, 0.0023990336339920759, 0.046949286013841629, 0.018728882074356079, 0.05579134076833725, 0.00068963365629315376, 0.01084409561008215, 0.037171121686697006, 0.0062595680356025696, 2.9411381774480105e-07, 0.037898417562246323, 0.014423784799873829, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,120,120,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,120,120,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.67358088493347168, } };
const TfArray<1, int> quant46_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,120,120,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,121,121,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.49900984764099121, } };
const TfArray<1, int> quant50_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.5841715931892395, } };
const TfArray<1, int> quant53_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.65164053440093994, } };
const TfArray<1, int> quant54_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.28150448203086853, } };
const TfArray<1, int> quant58_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.21698649227619171, } };
const TfArray<1, int> quant61_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.28658279776573181, } };
const TfArray<1, int> quant62_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23247614502906799, } };
const TfArray<1, int> quant65_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,30,30,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.38581195473670959, } };
const TfArray<1, int> quant66_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,30,30,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,30,30,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.059018626809120178, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,30,30,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.099644891917705536, } };
const TfArray<1, int> quant69_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,30,30,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230400), (TfLiteIntArray*)&g0::tensor_dimension44, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 230400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 230400), (TfLiteIntArray*)&g0::tensor_dimension46, 115200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 702768), (TfLiteIntArray*)&g0::tensor_dimension47, 691200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 702768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 702768), (TfLiteIntArray*)&g0::tensor_dimension49, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 345600), (TfLiteIntArray*)&g0::tensor_dimension50, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension51, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension53, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension55, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 178608), (TfLiteIntArray*)&g0::tensor_dimension57, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 221808), (TfLiteIntArray*)&g0::tensor_dimension58, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension59, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension61, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 172800), (TfLiteIntArray*)&g0::tensor_dimension62, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension63, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 100800), (TfLiteIntArray*)&g0::tensor_dimension65, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension66, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 86400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 86400), (TfLiteIntArray*)&g0::tensor_dimension68, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2704), (TfLiteIntArray*)&g0::tensor_dimension69, 2700, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 2700, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
